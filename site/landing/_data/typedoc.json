{
	"id": 0,
	"name": "rpc_ts",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "ModuleRpcClient",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/hadrienchauvin/code/rpc_ts/src/client/backoff.ts",
			"comment": {
				"shortText": "Generic tooling to implement the client side of an RPC service.  To create an RPC\nclient, however, see [[ModuleRpcProtocolClient.getRpcClient]].",
				"tags": [
					{
						"tag": "license",
						"text": "\nCopyright (c) Aiden.ai\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n"
					}
				]
			},
			"children": [
				{
					"id": 69,
					"name": "ClientError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true,
						"isAbstract": true
					},
					"comment": {
						"shortText": "Base class for all client errors."
					},
					"children": [
						{
							"id": 73,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 74,
									"name": "new ClientError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 75,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ClientError",
										"id": 69
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseError.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.__constructor"
							}
						},
						{
							"id": 70,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.message"
							}
						},
						{
							"id": 71,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 22,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.name"
							}
						},
						{
							"id": 72,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.stack"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								73
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								70,
								71,
								72
							]
						}
					],
					"sources": [
						{
							"fileName": "client/errors.ts",
							"line": 14,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseError"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "RequestContextError",
							"id": 76
						},
						{
							"type": "reference",
							"name": "ResponseContextDecodingError",
							"id": 83
						},
						{
							"type": "reference",
							"name": "ClientProtocolError",
							"id": 90
						},
						{
							"type": "reference",
							"name": "ClientTransportError",
							"id": 99
						},
						{
							"type": "reference",
							"name": "ClientRpcError",
							"id": 107
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 90,
					"name": "ClientProtocolError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The server did not respect the transport protocol."
					},
					"children": [
						{
							"id": 91,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 94,
									"name": "new ClientProtocolError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 95,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The URL (`<remote address>/<method name>`)\nthat did not respect the transport protocol.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 96,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ClientProtocolError",
										"id": 90
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseError.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "client/errors.ts",
									"line": 23,
									"character": 54
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseError.__constructor"
							}
						},
						{
							"id": 93,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "client/errors.ts",
									"line": 28,
									"character": 52
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "BaseError.message"
							}
						},
						{
							"id": 97,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 22,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.name"
							}
						},
						{
							"id": 98,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.stack"
							}
						},
						{
							"id": 92,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true
							},
							"comment": {
								"shortText": "The URL (`<remote address>/<method name>`)\nthat did not respect the transport protocol.\n"
							},
							"sources": [
								{
									"fileName": "client/errors.ts",
									"line": 28,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								91
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								93,
								97,
								98,
								92
							]
						}
					],
					"sources": [
						{
							"fileName": "client/errors.ts",
							"line": 23,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ClientError",
							"id": 69
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 107,
					"name": "ClientRpcError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A remote error intercepted by the RPC client.  Note that RPC handlers should\nthrow a different error ([[ModuleRpcServer.ServerRpcError]]).  We do this\nto ensure that no RPC server mistakenly rethrow the RPC error of an upstream\nservice."
					},
					"typeParameter": [
						{
							"id": 108,
							"name": "ResponseContext",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 109,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 113,
									"name": "new ClientRpcError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 114,
											"name": "errorType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Type of the RPC error."
											},
											"type": {
												"type": "reference",
												"name": "RpcErrorType",
												"id": 24
											}
										},
										{
											"id": 115,
											"name": "msg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Optional message describing the RPC error in more details."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 116,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Response context given back by the RPC.\n"
											},
											"type": {
												"type": "reference",
												"name": "ResponseContext",
												"id": 108
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ClientRpcError",
										"id": 107
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseError.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "client/errors.ts",
									"line": 52,
									"character": 72
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseError.__constructor"
							}
						},
						{
							"id": 112,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Response context given back by the RPC.\n"
							},
							"sources": [
								{
									"fileName": "client/errors.ts",
									"line": 61,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"name": "ResponseContext",
								"id": 108
							}
						},
						{
							"id": 110,
							"name": "errorType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true
							},
							"comment": {
								"shortText": "Type of the RPC error."
							},
							"sources": [
								{
									"fileName": "client/errors.ts",
									"line": 59,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "RpcErrorType",
								"id": 24
							}
						},
						{
							"id": 117,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.message"
							}
						},
						{
							"id": 111,
							"name": "msg",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Optional message describing the RPC error in more details."
							},
							"sources": [
								{
									"fileName": "client/errors.ts",
									"line": 60,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 118,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 22,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.name"
							}
						},
						{
							"id": 119,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.stack"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								109
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								112,
								110,
								117,
								111,
								118,
								119
							]
						}
					],
					"sources": [
						{
							"fileName": "client/errors.ts",
							"line": 52,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ClientError",
							"id": 69
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 99,
					"name": "ClientTransportError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "There has been an error in the transport layer."
					},
					"children": [
						{
							"id": 100,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 102,
									"name": "new ClientTransportError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 103,
											"name": "cause",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Cause of the transport error.\n"
											},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ClientTransportError",
										"id": 99
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseError.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "client/errors.ts",
									"line": 34,
									"character": 55
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseError.__constructor"
							}
						},
						{
							"id": 101,
							"name": "cause",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true
							},
							"comment": {
								"shortText": "Cause of the transport error.\n"
							},
							"sources": [
								{
									"fileName": "client/errors.ts",
									"line": 38,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"name": "Error"
							}
						},
						{
							"id": 104,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.message"
							}
						},
						{
							"id": 105,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 22,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.name"
							}
						},
						{
							"id": 106,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.stack"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								100
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								101,
								104,
								105,
								106
							]
						}
					],
					"sources": [
						{
							"fileName": "client/errors.ts",
							"line": 34,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ClientError",
							"id": 69
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 76,
					"name": "RequestContextError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An error ocurred when providing the request context."
					},
					"children": [
						{
							"id": 80,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 81,
									"name": "new RequestContextError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 82,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "RequestContextError",
										"id": 76
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseError.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.__constructor"
							}
						},
						{
							"id": 77,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.message"
							}
						},
						{
							"id": 78,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 22,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.name"
							}
						},
						{
							"id": 79,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.stack"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								80
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								77,
								78,
								79
							]
						}
					],
					"sources": [
						{
							"fileName": "client/errors.ts",
							"line": 17,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ClientError",
							"id": 69
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 83,
					"name": "ResponseContextDecodingError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An error occurred during the decoding of the response context."
					},
					"children": [
						{
							"id": 87,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 88,
									"name": "new ResponseContextDecodingError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 89,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ResponseContextDecodingError",
										"id": 83
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseError.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.__constructor"
							}
						},
						{
							"id": 84,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.message"
							}
						},
						{
							"id": 85,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 22,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.name"
							}
						},
						{
							"id": 86,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.stack"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								87
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								84,
								85,
								86
							]
						}
					],
					"sources": [
						{
							"fileName": "client/errors.ts",
							"line": 20,
							"character": 41
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ClientError",
							"id": 69
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 212,
					"name": "Service",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Implements a service from a [[StreamProducer]].  The StreamProducer\nis provided by a streaming protocol, for instance through [[getGrpcWebClient]] in the\ncase of the gRPC-Web protocol."
					},
					"typeParameter": [
						{
							"id": 213,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The definition of the service, enumerating all the\nmethods and their request and response types."
							},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.ServiceDefinition",
								"id": 40
							}
						},
						{
							"id": 214,
							"name": "ResponseContext",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of the response context that is transmitted along\nwith the response to the client.\n"
							}
						}
					],
					"children": [
						{
							"id": 215,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 217,
									"name": "new Service",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 218,
											"name": "serviceDefinition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The definition of the service."
											},
											"type": {
												"type": "typeParameter",
												"name": "serviceDefinition",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.ServiceDefinition",
													"id": 40
												}
											}
										},
										{
											"id": 219,
											"name": "streamProducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "A handler that produces a stream of [[ResponseWithContext]]\nobjects given a method name and an RPC request to which the transportation is delegated.\n"
											},
											"type": {
												"type": "reference",
												"name": "StreamProducer",
												"id": 121
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Service",
										"id": 212
									}
								}
							],
							"sources": [
								{
									"fileName": "client/service.ts",
									"line": 31,
									"character": 3
								}
							]
						},
						{
							"id": 216,
							"name": "serviceDefinition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true
							},
							"comment": {
								"shortText": "The definition of the service."
							},
							"sources": [
								{
									"fileName": "client/service.ts",
									"line": 38,
									"character": 30
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "serviceDefinition",
								"constraint": {
									"type": "reference",
									"name": "ModuleRpcCommon.ServiceDefinition",
									"id": 40
								}
							}
						},
						{
							"id": 227,
							"name": "call",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 228,
									"name": "call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calls a unary method on a request.",
										"text": "The underlying server stream is retrieved and transformed into a promise.\n",
										"returns": "An object containing the response of the RPC and the context of\nthe response (meta-information).  The response context contains the information\nthat is related to the \"remote\" aspect of the procedure call: it would be empty if\nthe call were to be made within the same OS process.\n",
										"tags": [
											{
												"tag": "throws",
												"text": "[[ClientProtocolError]] if the remote implementation was not that of a unary method."
											},
											{
												"tag": "throws",
												"text": "`Error` if errors were encountered during the streaming.\n"
											},
											{
												"tag": "see",
												"text": "[[streamAsPromise]]\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 229,
											"name": "method",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ModuleRpcCommon.UnaryMethodsFor",
												"id": 56,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "serviceDefinition",
														"constraint": {
															"type": "reference",
															"name": "ModuleRpcCommon.ServiceDefinition",
															"id": 40
														}
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 230,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "method",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.UnaryMethodsFor",
													"id": 56,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "serviceDefinition",
															"constraint": {
																"type": "reference",
																"name": "ModuleRpcCommon.ServiceDefinition",
																"id": 40
															}
														}
													]
												}
											}
										},
										{
											"id": 231,
											"name": "request",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ModuleRpcCommon.RequestFor",
														"id": 50,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "serviceDefinition",
																"constraint": {
																	"type": "reference",
																	"name": "ModuleRpcCommon.ServiceDefinition",
																	"id": 40
																}
															},
															{
																"type": "typeParameter",
																"name": "method",
																"constraint": {
																	"type": "reference",
																	"name": "ModuleRpcCommon.UnaryMethodsFor",
																	"id": 56,
																	"typeArguments": [
																		{
																			"type": "typeParameter",
																			"name": "serviceDefinition",
																			"constraint": {
																				"type": "reference",
																				"name": "ModuleRpcCommon.ServiceDefinition",
																				"id": 40
																			}
																		}
																	]
																}
															}
														]
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 232,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 233,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "ModuleRpcCommon.RequestFor",
																		"id": 50,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "serviceDefinition",
																				"constraint": {
																					"type": "reference",
																					"name": "ModuleRpcCommon.ServiceDefinition",
																					"id": 40
																				}
																			},
																			{
																				"type": "typeParameter",
																				"name": "method",
																				"constraint": {
																					"type": "reference",
																					"name": "ModuleRpcCommon.UnaryMethodsFor",
																					"id": 56,
																					"typeArguments": [
																						{
																							"type": "typeParameter",
																							"name": "serviceDefinition",
																							"constraint": {
																								"type": "reference",
																								"name": "ModuleRpcCommon.ServiceDefinition",
																								"id": 40
																							}
																						}
																					]
																				}
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "client/service.ts",
																	"line": 84,
																	"character": 7
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ResponseWithContext",
												"id": 239,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "serviceDefinition"
													},
													{
														"type": "unknown",
														"name": "method"
													},
													{
														"type": "unknown",
														"name": "ResponseContext"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "client/service.ts",
									"line": 80,
									"character": 6
								}
							]
						},
						{
							"id": 237,
							"name": "nice",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 238,
									"name": "nice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return a \"nice\" service interface with which it is possible to call RPCs\nas \"normal\" JavaScript functions.",
										"tags": [
											{
												"tag": "example",
												"text": "```TypeScript\n// Before\nconst service: Service<...> = ...;\nservice.stream('serverStream', { foo: 'bar' })\n  .on('message', ({ response, responseContext }) => { ... })\n  .start();\nconst { response, responseContext } = await service.call('unaryMethod', { foo: 'bar' });\n\n// After\nconst niceService = service.nice();\nniceService.serverStream({ foo: 'bar' })\n  .on('message', response => { ... })\n  .start();\nconst response = await niceService.unaryMethod({ foo: 'bar' });\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "NiceService",
										"id": 282,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "serviceDefinition",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.ServiceDefinition",
													"id": 40
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "client/service.ts",
									"line": 160,
									"character": 6
								}
							]
						},
						{
							"id": 220,
							"name": "stream",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 221,
									"name": "stream",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves a server stream from a method using a request.",
										"returns": "An object containing the response of the RPC and the context of\nthe response (meta-information).  The response context contains the information\nthat is related to the \"remote\" aspect of the procedure call: it would be empty if\nthe call were to be made within the same OS process.\n"
									},
									"typeParameter": [
										{
											"id": 222,
											"name": "method",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ModuleRpcCommon.MethodsFor",
												"id": 48,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "serviceDefinition",
														"constraint": {
															"type": "reference",
															"name": "ModuleRpcCommon.ServiceDefinition",
															"id": 40
														}
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 223,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "method",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.MethodsFor",
													"id": 48,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "serviceDefinition",
															"constraint": {
																"type": "reference",
																"name": "ModuleRpcCommon.ServiceDefinition",
																"id": 40
															}
														}
													]
												}
											}
										},
										{
											"id": 224,
											"name": "request",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ModuleRpcCommon.RequestFor",
														"id": 50,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "serviceDefinition",
																"constraint": {
																	"type": "reference",
																	"name": "ModuleRpcCommon.ServiceDefinition",
																	"id": 40
																}
															},
															{
																"type": "typeParameter",
																"name": "method",
																"constraint": {
																	"type": "reference",
																	"name": "ModuleRpcCommon.MethodsFor",
																	"id": 48,
																	"typeArguments": [
																		{
																			"type": "typeParameter",
																			"name": "serviceDefinition",
																			"constraint": {
																				"type": "reference",
																				"name": "ModuleRpcCommon.ServiceDefinition",
																				"id": 40
																			}
																		}
																	]
																}
															}
														]
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 225,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 226,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "ModuleRpcCommon.RequestFor",
																		"id": 50,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "serviceDefinition",
																				"constraint": {
																					"type": "reference",
																					"name": "ModuleRpcCommon.ServiceDefinition",
																					"id": 40
																				}
																			},
																			{
																				"type": "typeParameter",
																				"name": "method",
																				"constraint": {
																					"type": "reference",
																					"name": "ModuleRpcCommon.MethodsFor",
																					"id": 48,
																					"typeArguments": [
																						{
																							"type": "typeParameter",
																							"name": "serviceDefinition",
																							"constraint": {
																								"type": "reference",
																								"name": "ModuleRpcCommon.ServiceDefinition",
																								"id": 40
																							}
																						}
																					]
																				}
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "client/service.ts",
																	"line": 54,
																	"character": 7
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Stream",
										"id": 129,
										"typeArguments": [
											{
												"type": "reference",
												"name": "ResponseWithContext",
												"id": 239,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "serviceDefinition",
														"constraint": {
															"type": "reference",
															"name": "ModuleRpcCommon.ServiceDefinition",
															"id": 40
														}
													},
													{
														"type": "typeParameter",
														"name": "method",
														"constraint": {
															"type": "reference",
															"name": "ModuleRpcCommon.MethodsFor",
															"id": 48,
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "serviceDefinition",
																	"constraint": {
																		"type": "reference",
																		"name": "ModuleRpcCommon.ServiceDefinition",
																		"id": 40
																	}
																}
															]
														}
													},
													{
														"type": "typeParameter",
														"name": "ResponseContext"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "client/service.ts",
									"line": 50,
									"character": 8
								}
							]
						},
						{
							"id": 234,
							"name": "withRetry",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 235,
									"name": "withRetry",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a service wrapped with a given retry policy that applies to all\nthe methods of this service."
									},
									"parameters": [
										{
											"id": 236,
											"name": "backoffOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options for the exponential backoff.\n"
											},
											"type": {
												"type": "reference",
												"name": "Partial",
												"typeArguments": [
													{
														"type": "reference",
														"name": "BackoffOptions",
														"id": 2
													}
												]
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "ServiceRetrier",
										"id": 257,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "serviceDefinition",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.ServiceDefinition",
													"id": 40
												}
											},
											{
												"type": "typeParameter",
												"name": "ResponseContext"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "client/service.ts",
									"line": 134,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								215
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								216
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								227,
								237,
								220,
								234
							]
						}
					],
					"sources": [
						{
							"fileName": "client/service.ts",
							"line": 28,
							"character": 20
						}
					]
				},
				{
					"id": 2,
					"name": "BackoffOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options for an exponential backoff."
					},
					"children": [
						{
							"id": 4,
							"name": "constantBackoffMs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "client/backoff.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 3,
							"name": "exponentialBackoffBase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "client/backoff.ts",
									"line": 15,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 5,
							"name": "maxBackoffMs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "client/backoff.ts",
									"line": 17,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 6,
							"name": "maxRetries",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "client/backoff.ts",
									"line": 18,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4,
								3,
								5,
								6
							]
						}
					],
					"sources": [
						{
							"fileName": "client/backoff.ts",
							"line": 14,
							"character": 31
						}
					]
				},
				{
					"id": 61,
					"name": "ClientContextConnector",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A context connector for the client."
					},
					"typeParameter": [
						{
							"id": 62,
							"name": "ResponseContext",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 65,
							"name": "decodeResponseContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 66,
									"name": "decodeResponseContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Decodes the response context received from the server into a `ResponseContext`."
									},
									"parameters": [
										{
											"id": 67,
											"name": "encodedResponseContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ResponseContext"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "client/context_connector.ts",
									"line": 25,
									"character": 23
								}
							]
						},
						{
							"id": 63,
							"name": "provideRequestContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 64,
									"name": "provideRequestContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Encodes the request context that is sent to the server\n(the server decodes it into a `RequestContext` using a `ServerContextConnector`)"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "client/context_connector.ts",
									"line": 20,
									"character": 23
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								65,
								63
							]
						}
					],
					"sources": [
						{
							"fileName": "client/context_connector.ts",
							"line": 15,
							"character": 39
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "CompositeClientContextConnector",
							"id": 314
						},
						{
							"type": "reference",
							"name": "EmptyClientContextConnector",
							"id": 328
						},
						{
							"type": "reference",
							"name": "TimestampClientContextConnector",
							"id": 335
						},
						{
							"type": "reference",
							"name": "TokenAuthClientContextConnector",
							"id": 342
						}
					]
				},
				{
					"id": 239,
					"name": "ResponseWithContext",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A response with a response context for a given service method.",
						"tags": [
							{
								"tag": "see",
								"text": "[[Service.stream]]\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 240,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.ServiceDefinition",
								"id": 40
							}
						},
						{
							"id": 241,
							"name": "method",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.MethodsFor",
								"id": 48,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition"
									}
								]
							}
						},
						{
							"id": 242,
							"name": "ResponseContext",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 243,
							"name": "response",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "client/service.ts",
									"line": 196,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.ResponseFor",
								"id": 53,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition",
										"constraint": {
											"type": "reference",
											"name": "ModuleRpcCommon.ServiceDefinition",
											"id": 40
										}
									},
									{
										"type": "typeParameter",
										"name": "method",
										"constraint": {
											"type": "reference",
											"name": "ModuleRpcCommon.MethodsFor",
											"id": 48,
											"typeArguments": [
												{
													"type": "typeParameter",
													"name": "serviceDefinition"
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 244,
							"name": "responseContext",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "client/service.ts",
									"line": 197,
									"character": 17
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "ResponseContext"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								243,
								244
							]
						}
					],
					"sources": [
						{
							"fileName": "client/service.ts",
							"line": 191,
							"character": 36
						}
					]
				},
				{
					"id": 172,
					"name": "RetryingStream",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A \"concatenation\" of all the streams initiated by [[retryStream]]."
					},
					"typeParameter": [
						{
							"id": 173,
							"name": "Message",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 176,
							"name": "cancel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 177,
									"name": "cancel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"overwrites": {
										"type": "reference",
										"name": "Stream.cancel",
										"id": 133
									}
								}
							],
							"sources": [
								{
									"fileName": "client/stream_retrier.ts",
									"line": 53,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Stream.cancel",
								"id": 133
							}
						},
						{
							"id": 178,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 179,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register an event listener.",
										"text": "In addition to the events from the `Stream` interface, the following\nevents are emitted:\n\n- `retryingError`: When an error occurred, with the following parameters:\n  - `err`: The error that occurred\n  - `retriesSinceLastReady`: The number of retries since a stream emitted\nthe `ready` event.\n  - `abandoned`: Whether the retrying stream gave up because of this error.\n- `error`: When an error occurred that made the retrying stream give up.\n"
									},
									"parameters": [
										{
											"id": 180,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "ready"
													},
													{
														"type": "stringLiteral",
														"value": "complete"
													},
													{
														"type": "stringLiteral",
														"value": "canceled"
													}
												]
											}
										},
										{
											"id": 181,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 182,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 183,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "client/stream_retrier.ts",
															"line": 68,
															"character": 56
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"overwrites": {
										"type": "reference",
										"name": "Stream.on",
										"id": 135
									}
								},
								{
									"id": 184,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 185,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "message"
											}
										},
										{
											"id": 186,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 187,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 188,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 189,
																	"name": "message",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "Message"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "client/stream_retrier.ts",
															"line": 69,
															"character": 32
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"overwrites": {
										"type": "reference",
										"name": "Stream.on",
										"id": 135
									}
								},
								{
									"id": 190,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 191,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 192,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 193,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 194,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 195,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "client/stream_retrier.ts",
															"line": 70,
															"character": 30
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"overwrites": {
										"type": "reference",
										"name": "Stream.on",
										"id": 135
									}
								},
								{
									"id": 196,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 197,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "retryingError"
											}
										},
										{
											"id": 198,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 199,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 200,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 201,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Error"
																	}
																},
																{
																	"id": 202,
																	"name": "retriesSinceLastReady",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 203,
																	"name": "abandoned",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "client/stream_retrier.ts",
															"line": 73,
															"character": 13
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"overwrites": {
										"type": "reference",
										"name": "Stream.on",
										"id": 135
									}
								}
							],
							"sources": [
								{
									"fileName": "client/stream_retrier.ts",
									"line": 68,
									"character": 4
								},
								{
									"fileName": "client/stream_retrier.ts",
									"line": 69,
									"character": 4
								},
								{
									"fileName": "client/stream_retrier.ts",
									"line": 70,
									"character": 4
								},
								{
									"fileName": "client/stream_retrier.ts",
									"line": 71,
									"character": 4
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Stream.on",
								"id": 135
							}
						},
						{
							"id": 174,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 175,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"overwrites": {
										"type": "reference",
										"name": "Stream.start",
										"id": 131
									}
								}
							],
							"sources": [
								{
									"fileName": "client/stream_retrier.ts",
									"line": 52,
									"character": 7
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Stream.start",
								"id": 131
							}
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								176,
								178,
								174
							]
						}
					],
					"sources": [
						{
							"fileName": "client/stream_retrier.ts",
							"line": 51,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Stream",
							"id": 129,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "Message"
								}
							]
						}
					]
				},
				{
					"id": 250,
					"name": "ServerStreamMethod",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A server-stream method typed as part of a \"nice\" service."
					},
					"typeParameter": [
						{
							"id": 251,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.ServiceDefinition",
								"id": 40
							}
						},
						{
							"id": 252,
							"name": "method",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.MethodsFor",
								"id": 48,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition"
									}
								]
							}
						}
					],
					"signatures": [
						{
							"id": 253,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A server-stream method typed as part of a \"nice\" service."
							},
							"parameters": [
								{
									"id": 254,
									"name": "request",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ModuleRpcCommon.RequestFor",
												"id": 50,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "serviceDefinition",
														"constraint": {
															"type": "reference",
															"name": "ModuleRpcCommon.ServiceDefinition",
															"id": 40
														}
													},
													{
														"type": "typeParameter",
														"name": "method",
														"constraint": {
															"type": "reference",
															"name": "ModuleRpcCommon.MethodsFor",
															"id": 48,
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "serviceDefinition"
																}
															]
														}
													}
												]
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 255,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 256,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "ModuleRpcCommon.RequestFor",
																"id": 50,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "serviceDefinition",
																		"constraint": {
																			"type": "reference",
																			"name": "ModuleRpcCommon.ServiceDefinition",
																			"id": 40
																		}
																	},
																	{
																		"type": "typeParameter",
																		"name": "method",
																		"constraint": {
																			"type": "reference",
																			"name": "ModuleRpcCommon.MethodsFor",
																			"id": 48,
																			"typeArguments": [
																				{
																					"type": "typeParameter",
																					"name": "serviceDefinition"
																				}
																			]
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "client/service.ts",
															"line": 235,
															"character": 7
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Stream",
								"id": 129,
								"typeArguments": [
									{
										"type": "reference",
										"name": "ModuleRpcCommon.ResponseFor",
										"id": 53,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "serviceDefinition",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.ServiceDefinition",
													"id": 40
												}
											},
											{
												"type": "typeParameter",
												"name": "method",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.MethodsFor",
													"id": 48,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "serviceDefinition"
														}
													]
												}
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "client/service.ts",
							"line": 228,
							"character": 35
						}
					]
				},
				{
					"id": 257,
					"name": "ServiceRetrier",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Wrapper that retries RPCs when they fail and emit service-wide events."
					},
					"typeParameter": [
						{
							"id": 258,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.ServiceDefinition",
								"id": 40
							}
						},
						{
							"id": 259,
							"name": "ResponseContext",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 262,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 263,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register listeners.",
										"text": "Events are:\n\n- `serviceReady`: When a method is ready to process a request.\n- `serviceComplete`: When a method has completed after successfully\nprocessing a request.\n- `serviceError`: When a method has errored.  Parameters:\n  - `err`: The error.\n  - `retriesSinceLastReady`: The number of retries made since the method\nlast emitted a 'ready' event.\n  - `abandoned`: Whether as a result of this error event the retrying was\nabandoned (as a consequence, the error `err` has been forwarded to the client).\n  - `method`: The method that errored.\n  - `request`: The request the method errored on.\n"
									},
									"parameters": [
										{
											"id": 264,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "serviceReady"
													},
													{
														"type": "stringLiteral",
														"value": "serviceComplete"
													}
												]
											}
										},
										{
											"id": 265,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 266,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 267,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"typeParameter": [
																{
																	"id": 268,
																	"name": "method",
																	"kind": 131072,
																	"kindString": "Type parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "ModuleRpcCommon.MethodsFor",
																		"id": 48,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "serviceDefinition",
																				"constraint": {
																					"type": "reference",
																					"name": "ModuleRpcCommon.ServiceDefinition",
																					"id": 40
																				}
																			}
																		]
																	}
																}
															],
															"parameters": [
																{
																	"id": 269,
																	"name": "method",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "method",
																		"constraint": {
																			"type": "reference",
																			"name": "ModuleRpcCommon.MethodsFor",
																			"id": 48,
																			"typeArguments": [
																				{
																					"type": "typeParameter",
																					"name": "serviceDefinition",
																					"constraint": {
																						"type": "reference",
																						"name": "ModuleRpcCommon.ServiceDefinition",
																						"id": 40
																					}
																				}
																			]
																		}
																	}
																},
																{
																	"id": 270,
																	"name": "request",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "ModuleRpcCommon.RequestFor",
																		"id": 50,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "serviceDefinition",
																				"constraint": {
																					"type": "reference",
																					"name": "ModuleRpcCommon.ServiceDefinition",
																					"id": 40
																				}
																			},
																			{
																				"type": "typeParameter",
																				"name": "method",
																				"constraint": {
																					"type": "reference",
																					"name": "ModuleRpcCommon.MethodsFor",
																					"id": 48,
																					"typeArguments": [
																						{
																							"type": "typeParameter",
																							"name": "serviceDefinition",
																							"constraint": {
																								"type": "reference",
																								"name": "ModuleRpcCommon.ServiceDefinition",
																								"id": 40
																							}
																						}
																					]
																				}
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "client/service.ts",
															"line": 273,
															"character": 13
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									}
								},
								{
									"id": 271,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 272,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "serviceError"
											}
										},
										{
											"id": 273,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 274,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 275,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"typeParameter": [
																{
																	"id": 276,
																	"name": "method",
																	"kind": 131072,
																	"kindString": "Type parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "ModuleRpcCommon.MethodsFor",
																		"id": 48,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "serviceDefinition",
																				"constraint": {
																					"type": "reference",
																					"name": "ModuleRpcCommon.ServiceDefinition",
																					"id": 40
																				}
																			}
																		]
																	}
																}
															],
															"parameters": [
																{
																	"id": 277,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Error"
																	}
																},
																{
																	"id": 278,
																	"name": "retriesSinceLastReady",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 279,
																	"name": "abandoned",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																},
																{
																	"id": 280,
																	"name": "method",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "method",
																		"constraint": {
																			"type": "reference",
																			"name": "ModuleRpcCommon.MethodsFor",
																			"id": 48,
																			"typeArguments": [
																				{
																					"type": "typeParameter",
																					"name": "serviceDefinition",
																					"constraint": {
																						"type": "reference",
																						"name": "ModuleRpcCommon.ServiceDefinition",
																						"id": 40
																					}
																				}
																			]
																		}
																	}
																},
																{
																	"id": 281,
																	"name": "request",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "ModuleRpcCommon.RequestFor",
																		"id": 50,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "serviceDefinition",
																				"constraint": {
																					"type": "reference",
																					"name": "ModuleRpcCommon.ServiceDefinition",
																					"id": 40
																				}
																			},
																			{
																				"type": "typeParameter",
																				"name": "method",
																				"constraint": {
																					"type": "reference",
																					"name": "ModuleRpcCommon.MethodsFor",
																					"id": 48,
																					"typeArguments": [
																						{
																							"type": "typeParameter",
																							"name": "serviceDefinition",
																							"constraint": {
																								"type": "reference",
																								"name": "ModuleRpcCommon.ServiceDefinition",
																								"id": 40
																							}
																						}
																					]
																				}
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "client/service.ts",
															"line": 280,
															"character": 13
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									}
								}
							],
							"sources": [
								{
									"fileName": "client/service.ts",
									"line": 271,
									"character": 4
								},
								{
									"fileName": "client/service.ts",
									"line": 278,
									"character": 4
								}
							]
						},
						{
							"id": 260,
							"name": "service",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 261,
									"name": "service",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return the wrapped service.  All the methods are retried using the\nagreed-upon strategy.",
										"tags": [
											{
												"tag": "see",
												"text": "ModuleRpcClient.Service#withRetry()\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Service",
										"id": 212,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "serviceDefinition",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.ServiceDefinition",
													"id": 40
												}
											},
											{
												"type": "typeParameter",
												"name": "ResponseContext"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "client/service.ts",
									"line": 252,
									"character": 9
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								262,
								260
							]
						}
					],
					"sources": [
						{
							"fileName": "client/service.ts",
							"line": 242,
							"character": 31
						}
					]
				},
				{
					"id": 129,
					"name": "Stream",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Streams are `EventEmitter` objects that are \"read-only\" (i.e. they can only register\nlisteners, their `emit` function is not exposed), can be started and canceled,\nand expose a number of standard events relevant to the lifecycle of an RPC.",
						"text": "They are produced by a [[StreamProducer]] which takes an RPC method name and\nan RPC request.\n\nStreams are used to implement both server streams and unary calls (a unary call\nis then simply a stream that is expected to send one and only one message).\n"
					},
					"typeParameter": [
						{
							"id": 130,
							"name": "Message",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 135,
							"name": "on",
							"kind": 8388608,
							"kindString": "Event",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 136,
									"name": "on",
									"kind": 8388608,
									"kindString": "Event",
									"flags": {},
									"comment": {
										"shortText": "Registers an event listener."
									},
									"parameters": [
										{
											"id": 137,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n- `'ready'`: The stream is ready.\n- `'complete'`: The stream successfully completed (no more message will be send).\n- `'canceled'`: The stream has been canceled.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "ready"
													},
													{
														"type": "stringLiteral",
														"value": "complete"
													},
													{
														"type": "stringLiteral",
														"value": "canceled"
													}
												]
											}
										},
										{
											"id": 138,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 139,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 140,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "client/stream.ts",
															"line": 59,
															"character": 56
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									}
								},
								{
									"id": 141,
									"name": "on",
									"kind": 8388608,
									"kindString": "Event",
									"flags": {},
									"comment": {
										"shortText": "Register an event listener."
									},
									"parameters": [
										{
											"id": 142,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n- `'message'`: A message has been received.\n"
											},
											"type": {
												"type": "stringLiteral",
												"value": "message"
											}
										},
										{
											"id": 143,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 144,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 145,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 146,
																	"name": "message",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "Message"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "client/stream.ts",
															"line": 68,
															"character": 32
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									}
								},
								{
									"id": 147,
									"name": "on",
									"kind": 8388608,
									"kindString": "Event",
									"flags": {},
									"comment": {
										"shortText": "Register an event listener."
									},
									"parameters": [
										{
											"id": 148,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n- `'error'`: An error occurred.\n"
											},
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 149,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 150,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 151,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 152,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "client/stream.ts",
															"line": 77,
															"character": 30
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									}
								}
							],
							"sources": [
								{
									"fileName": "client/stream.ts",
									"line": 59,
									"character": 4
								},
								{
									"fileName": "client/stream.ts",
									"line": 68,
									"character": 4
								},
								{
									"fileName": "client/stream.ts",
									"line": 77,
									"character": 4
								}
							]
						},
						{
							"id": 133,
							"name": "cancel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 134,
									"name": "cancel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Cancels the stream.  The `canceled` event will be emitted."
									},
									"type": {
										"type": "intrinsic",
										"name": "this"
									}
								}
							],
							"sources": [
								{
									"fileName": "client/stream.ts",
									"line": 47,
									"character": 8
								}
							]
						},
						{
							"id": 131,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 132,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts the stream.  No event will be processed and emitted before the stream is started:\nbasically, nothing happens before `start()` is called."
									},
									"type": {
										"type": "intrinsic",
										"name": "this"
									}
								}
							],
							"sources": [
								{
									"fileName": "client/stream.ts",
									"line": 44,
									"character": 7
								}
							]
						}
					],
					"groups": [
						{
							"title": "Events",
							"kind": 8388608,
							"children": [
								135
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								133,
								131
							]
						}
					],
					"sources": [
						{
							"fileName": "client/stream.ts",
							"line": 39,
							"character": 23
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "RetryingStream",
							"id": 172
						}
					]
				},
				{
					"id": 121,
					"name": "StreamProducer",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A stream producer takes an RPC method and a request and returns a stream.",
						"text": "Stream producers are implemented by streaming protocols (such as gRPC-Web).\n"
					},
					"signatures": [
						{
							"id": 122,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A stream producer takes an RPC method and a request and returns a stream.",
								"text": "Stream producers are implemented by streaming protocols (such as gRPC-Web).\n"
							},
							"typeParameter": [
								{
									"id": 123,
									"name": "Request",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 124,
									"name": "Message",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 125,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 126,
									"name": "request",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "Request"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 127,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 128,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "Request"
															}
														}
													],
													"sources": [
														{
															"fileName": "client/stream.ts",
															"line": 24,
															"character": 22
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Stream",
								"id": 129,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "Message"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "client/stream.ts",
							"line": 21,
							"character": 31
						}
					]
				},
				{
					"id": 245,
					"name": "UnaryMethod",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A unary method typed as part of a \"nice\" service."
					},
					"typeParameter": [
						{
							"id": 246,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.ServiceDefinition",
								"id": 40
							}
						},
						{
							"id": 247,
							"name": "method",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.MethodsFor",
								"id": 48,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition"
									}
								]
							}
						}
					],
					"signatures": [
						{
							"id": 248,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A unary method typed as part of a \"nice\" service."
							},
							"parameters": [
								{
									"id": 249,
									"name": "request",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ModuleRpcCommon.RequestFor",
										"id": 50,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "serviceDefinition",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.ServiceDefinition",
													"id": 40
												}
											},
											{
												"type": "typeParameter",
												"name": "method",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.MethodsFor",
													"id": 48,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "serviceDefinition"
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ModuleRpcCommon.ResponseFor",
										"id": 53,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "serviceDefinition",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.ServiceDefinition",
													"id": 40
												}
											},
											{
												"type": "typeParameter",
												"name": "method",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.MethodsFor",
													"id": 48,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "serviceDefinition"
														}
													]
												}
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "client/service.ts",
							"line": 218,
							"character": 28
						}
					]
				},
				{
					"id": 282,
					"name": "NiceService",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "\"Nice\" service derived from a service definition.",
						"tags": [
							{
								"tag": "see",
								"text": "[[Service.nice]]\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 283,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.ServiceDefinition",
								"id": 40
							}
						}
					],
					"sources": [
						{
							"fileName": "client/service.ts",
							"line": 205,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 284,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "client/service.ts",
									"line": 207,
									"character": 3
								}
							]
						}
					}
				},
				{
					"id": 12,
					"name": "getBackoffMs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 13,
							"name": "getBackoffMs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the number of milliseconds to elapse for a given number of retries\nand a backoff schedule."
							},
							"parameters": [
								{
									"id": 14,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BackoffOptions",
										"id": 2
									}
								},
								{
									"id": 15,
									"name": "retries",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "client/backoff.ts",
							"line": 33,
							"character": 28
						}
					]
				},
				{
					"id": 204,
					"name": "retryStream",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 205,
							"name": "retryStream",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retries a series of streams.",
								"returns": "A stream that is in effect a \"concatenation\" of all the streams initiated\nby `getStream`, with special events emitted to inform on the retrying process.\n",
								"tags": [
									{
										"tag": "example",
										"text": "```Typescript\nconst stream = retryStream(() => streamFromArray([1, 2, 3], new Error('error)));\nstream.on('message', console.log).start();\n```\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 206,
									"name": "Message",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"text": "The type of the message transmitted by the stream."
									}
								}
							],
							"parameters": [
								{
									"id": 207,
									"name": "getStream",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A stream provider.  The stream provider is called until a\nstream emits a 'complete' or 'canceled' event, or the maximum number of retries,\nas per the exponential backoff schedule, has been reached."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 208,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 209,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Stream",
														"id": 129,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "Message"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "client/stream_retrier.ts",
													"line": 39,
													"character": 12
												}
											]
										}
									}
								},
								{
									"id": 210,
									"name": "backoffOptions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Options for the exponential backoff.\n"
									},
									"type": {
										"type": "reference",
										"name": "Partial",
										"typeArguments": [
											{
												"type": "reference",
												"name": "BackoffOptions",
												"id": 2
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RetryingStream",
								"id": 172,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "Message"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "client/stream_retrier.ts",
							"line": 38,
							"character": 27
						}
					]
				},
				{
					"id": 167,
					"name": "streamAsPromise",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 168,
							"name": "streamAsPromise",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "\"Promisifies\" a stream.",
								"returns": "A promise that resolves to all the transmitted messages when the\nstream completes, and is rejected when the stream errors or is canceled (in this case,\nthe error is a [[ClientRpcError]] of type [[ModuleRpcCommon.RpcErrorType.canceled]]).\n",
								"tags": [
									{
										"tag": "example",
										"text": "```TypeScript\nconst result = await streamAsPromise(stream);\n// If stream emits 1, 2, 3, result is [1, 2, 3].\n// If the stream is canceled or errored, the promise is rejected.\n```\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 169,
									"name": "Message",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"text": "The type of the messages transmitted by the stream."
									}
								}
							],
							"parameters": [
								{
									"id": 170,
									"name": "stream",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The stream to promisify."
									},
									"type": {
										"type": "reference",
										"name": "Stream",
										"id": 129,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "Message"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "Message"
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "client/stream.ts",
							"line": 200,
							"character": 31
						}
					]
				},
				{
					"id": 153,
					"name": "streamFromArray",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 154,
							"name": "streamFromArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a stream created from an array that emits all the messages in the\narray then either completes or errors if `error` is specified.",
								"text": "This function is useful for testing.\n",
								"tags": [
									{
										"tag": "example",
										"text": "```Typescript\nconst stream = streamFromArray([1, 2, 3, 4]);\nstream.on('message', console.log(message)).on('complete', () => {\n  console.log('COMPLETE');\n}).start();\n\nconst streamWithError = streamFromArray([1, 2, 3], new Error('error'));\nstreamWithError.on('error', err => {\n  console.error('ERROR:', err);\n}).start();\n```\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 155,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 156,
									"name": "array",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								},
								{
									"id": 157,
									"name": "error",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Error"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Stream",
								"id": 129,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "client/stream.ts",
							"line": 98,
							"character": 31
						}
					]
				},
				{
					"id": 158,
					"name": "transformStream",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 159,
							"name": "transformStream",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Applies a function to each of the messages of a stream and streams the result.",
								"returns": "The outbound stream.\n",
								"tags": [
									{
										"tag": "example",
										"text": "```TypeScript\nconst sourceStream = streamFromArray([1, 2, 3]);\nconst result = transformStream(sourceStream, n => n * 2);\nresult.on('message', console.log).start();\n// Result emits 2, 4, 6.\n```\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 160,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"text": "The type of the inbound messages."
									}
								},
								{
									"id": 161,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"text": "The type of the outbound messages."
									}
								}
							],
							"parameters": [
								{
									"id": 162,
									"name": "source",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The inbound stream to source messages from."
									},
									"type": {
										"type": "reference",
										"name": "Stream",
										"id": 129,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								},
								{
									"id": 163,
									"name": "fn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The transformation function to apply to the messages of the inbound stream."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 164,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 165,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 166,
															"name": "t",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "U"
													}
												}
											],
											"sources": [
												{
													"fileName": "client/stream.ts",
													"line": 146,
													"character": 5
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Stream",
								"id": 129,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "U"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "client/stream.ts",
							"line": 144,
							"character": 31
						}
					]
				},
				{
					"id": 7,
					"name": "DEFAULT_BACKOFF_OPTIONS",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "Default options for an exponential backoff."
					},
					"children": [
						{
							"id": 9,
							"name": "constantBackoffMs",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "client/backoff.ts",
									"line": 24,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "500"
						},
						{
							"id": 8,
							"name": "exponentialBackoffBase",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "client/backoff.ts",
									"line": 23,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "2"
						},
						{
							"id": 10,
							"name": "maxBackoffMs",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "client/backoff.ts",
									"line": 25,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "3000"
						},
						{
							"id": 11,
							"name": "maxRetries",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "client/backoff.ts",
									"line": 26,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " -1"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								9,
								8,
								10,
								11
							]
						}
					],
					"sources": [
						{
							"fileName": "client/backoff.ts",
							"line": 22,
							"character": 36
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						69,
						90,
						107,
						99,
						76,
						83,
						212
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2,
						61,
						239,
						172,
						250,
						257,
						129,
						121,
						245
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						282
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						12,
						204,
						167,
						153,
						158
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						7
					]
				}
			],
			"sources": [
				{
					"fileName": "client/backoff.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 16,
			"name": "ModuleRpcCommon",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/hadrienchauvin/code/rpc_ts/src/common/common.ts",
			"comment": {
				"shortText": "Definitions common to both the client and server sides of RPC services.",
				"tags": [
					{
						"tag": "license",
						"text": "\nCopyright (c) Aiden.ai\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n"
					}
				]
			},
			"children": [
				{
					"id": 24,
					"name": "RpcErrorType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Error types reported by RPC services.  The error types broadly follow the gRPC\nstatus codes as detailed here: https://github.com/grpc/grpc-go/blob/master/codes/codes.go"
					},
					"children": [
						{
							"id": 29,
							"name": "alreadyExists",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An attempt to create an entity failed because one already exists."
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 185,
									"character": 15
								}
							],
							"defaultValue": "\"alreadyExists\""
						},
						{
							"id": 26,
							"name": "canceled",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The operation was canceled (typically by the caller)."
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 172,
									"character": 10
								}
							],
							"defaultValue": "\"canceled\""
						},
						{
							"id": 32,
							"name": "failedPrecondition",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The operation was rejected because the system is not in a state required for the\noperation's execution. For example, directory to be deleted may be non-empty, an rmdir\noperation is applied to a non-directory, etc."
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 201,
									"character": 20
								}
							],
							"defaultValue": "\"failedPrecondition\""
						},
						{
							"id": 34,
							"name": "internal",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Some invariants expected by the underlying system has been broken. If you see one of\nthese errors, something is very broken."
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 210,
									"character": 10
								}
							],
							"defaultValue": "\"internal\""
						},
						{
							"id": 27,
							"name": "invalidArgument",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The client specified an invalid argument. Note that this differs from FailedPrecondition.\nIt indicates arguments that are problematic regardless of the state of the system\n(e.g., a malformed file name)."
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 179,
									"character": 17
								}
							],
							"defaultValue": "\"invalidArgument\""
						},
						{
							"id": 28,
							"name": "notFound",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Some requested entity (e.g., file or directory) was not found."
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 182,
									"character": 10
								}
							],
							"defaultValue": "\"notFound\""
						},
						{
							"id": 31,
							"name": "permissionDenied",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The caller does not have permission to execute the specified operation."
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 194,
									"character": 18
								}
							],
							"defaultValue": "\"permissionDenied\""
						},
						{
							"id": 30,
							"name": "resourceExhausted",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire\nfile system is out of space."
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 191,
									"character": 19
								}
							],
							"defaultValue": "\"resourceExhausted\""
						},
						{
							"id": 36,
							"name": "unauthenticated",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the request does not have valid authentication credentials for the operation."
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 219,
									"character": 17
								}
							],
							"defaultValue": "\"unauthenticated\""
						},
						{
							"id": 35,
							"name": "unavailable",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The service is currently unavailable.  This is a most likely a transient\ncondition and may be corrected by retrying with a backoff."
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 216,
									"character": 13
								}
							],
							"defaultValue": "\"unavailable\""
						},
						{
							"id": 33,
							"name": "unimplemented",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Operation is not implemented or not supported/enabled in this service."
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 204,
									"character": 15
								}
							],
							"defaultValue": "\"unimplemented\""
						},
						{
							"id": 25,
							"name": "unknown",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Unknown error."
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 169,
									"character": 9
								}
							],
							"defaultValue": "\"unknown\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								29,
								26,
								32,
								34,
								27,
								28,
								31,
								30,
								36,
								35,
								33,
								25
							]
						}
					],
					"sources": [
						{
							"fileName": "common/common.ts",
							"line": 167,
							"character": 24
						}
					]
				},
				{
					"id": 17,
					"name": "MisspecifiedServiceError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The service definition is misformed or ill-adapted to the transport protocol."
					},
					"children": [
						{
							"id": 21,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 22,
									"name": "new MisspecifiedServiceError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 23,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "MisspecifiedServiceError",
										"id": 17
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseError.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.__constructor"
							}
						},
						{
							"id": 18,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.message"
							}
						},
						{
							"id": 19,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 22,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.name"
							}
						},
						{
							"id": 20,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.stack"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								21
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								18,
								19,
								20
							]
						}
					],
					"sources": [
						{
							"fileName": "common/common.ts",
							"line": 75,
							"character": 37
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseError"
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 37,
					"name": "EncodedContext",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Map used to encode both request and response contexts.\nThe maps are produced and decoded by the client/server context connectors."
					},
					"indexSignature": {
						"id": 38,
						"name": "__index",
						"kind": 8192,
						"kindString": "Index signature",
						"flags": {},
						"comment": {
							"shortText": "Map used to encode both request and response contexts.\nThe maps are produced and decoded by the client/server context connectors."
						},
						"parameters": [
							{
								"id": 39,
								"name": "key",
								"kind": 32768,
								"kindString": "Parameter",
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"sources": [
						{
							"fileName": "common/common.ts",
							"line": 226,
							"character": 31
						}
					]
				},
				{
					"id": 48,
					"name": "MethodsFor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Method names for a service definition.",
						"tags": [
							{
								"tag": "example",
								"text": "```Typescript\nconst serviceDefinition = {\n  foo: { request: {} as {}, response: {} as {} },\n  bar: { request: {} as {}, response: {} as {} },\n};\n\n// `ModuleRpcCommon.MethodsFor<typeof serviceDefinition>` is equivalent\n// to `'foo' | 'bar'`.\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 49,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ServiceDefinition",
								"id": 40
							}
						}
					],
					"sources": [
						{
							"fileName": "common/common.ts",
							"line": 90,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"name": "Extract",
						"typeArguments": [
							{
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "typeParameter",
									"name": "serviceDefinition",
									"constraint": {
										"type": "reference",
										"name": "ServiceDefinition",
										"id": 40
									}
								}
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 50,
					"name": "RequestFor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of a request for the given method of a service.",
						"tags": [
							{
								"tag": "example",
								"text": "```Typescript\nconst serviceDefinition = {\n  foo: { request: {} as { hello: 'world' }, response: {} as {} },\n};\n\n// `ModuleRpcCommon.RequestFor<typeof serviceDefinition, 'foo'>` is equivalent to\n// `{ hello: 'world' }`.\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 51,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ServiceDefinition",
								"id": 40
							}
						},
						{
							"id": 52,
							"name": "method",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "MethodsFor",
								"id": 48,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "common/common.ts",
							"line": 107,
							"character": 22
						}
					],
					"type": {
						"type": "unknown",
						"name": "serviceDefinition[method][\"request\"]"
					}
				},
				{
					"id": 53,
					"name": "ResponseFor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of a response for the given method of a service.",
						"tags": [
							{
								"tag": "example",
								"text": "```Typescript\nconst serviceDefinition = {\n  foo: { request: {} as {}, response: {} as { hello: 'world' } },\n};\n\n// `ModuleRpcCommon.ResponseFor<typeof serviceDefinition, 'foo'>` is equivalent to\n// `{ hello: 'world' }`.\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 54,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ServiceDefinition",
								"id": 40
							}
						},
						{
							"id": 55,
							"name": "method",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "MethodsFor",
								"id": 48,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "common/common.ts",
							"line": 124,
							"character": 23
						}
					],
					"type": {
						"type": "unknown",
						"name": "serviceDefinition[method][\"response\"]"
					}
				},
				{
					"id": 40,
					"name": "ServiceDefinition",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "All service definitions derive from this type.",
						"text": "It associates a method name with request and response types as follows:\n```Typescript\nconst bankingServiceDefinition = {\n  getBalance: {\n    request: {} as {\n      userId: string;\n    },\n    response: {} as {\n      value: number;\n      unit: string;\n    },\n  },\n  transfer: {\n    request: {} as {\n      fromUserId: string;\n      toUserId: string;\n      amount: {\n        value: number;\n        unit: string;\n      }\n    },\n    response: {} as {},\n  },\n};\n```\n\nThe `{} as` allows us to derive proper typing.  It is better than defining\na service with, e.g., an interface: with the definition above, the methods\ncan be enumerated.\n"
					},
					"sources": [
						{
							"fileName": "common/common.ts",
							"line": 51,
							"character": 29
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 41,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 42,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 43,
										"name": "method",
										"kind": 32768,
										"kindString": "Parameter",
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reflection",
									"declaration": {
										"id": 44,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"sources": [
											{
												"fileName": "common/common.ts",
												"line": 52,
												"character": 19
											}
										]
									}
								}
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 51,
									"character": 31
								}
							]
						}
					}
				},
				{
					"id": 56,
					"name": "UnaryMethodsFor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Method names of the unary methods in a service definition (the server streams are\nfiltered out).",
						"tags": [
							{
								"tag": "example",
								"text": "```Typescript\nconst serviceDefinition = {\n  unary: { request: {} as {}, response: {} as {} },\n  serverStream: {\n    type: ModuleRpcCommon.ServiceMethodType.serverStream,\n    request: {} as {},\n    response: {} as {},\n  },\n};\n\n// `ModuleRpcCommon.UnaryMethodsFor<typeof serviceDefinition>` is equivalent\n// to `'unary'` (the method `'serverStream'` is filtered out).\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 57,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ServiceDefinition",
								"id": 40
							}
						}
					],
					"sources": [
						{
							"fileName": "common/common.ts",
							"line": 147,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "Extract",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ModuleRpcUtils.ValueOf",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 58,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "common/common.ts",
															"line": 150,
															"character": 25
														}
													]
												}
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							{
								"type": "reference",
								"name": "MethodsFor",
								"id": 48,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition",
										"constraint": {
											"type": "reference",
											"name": "ServiceDefinition",
											"id": 40
										}
									}
								]
							}
						]
					}
				},
				{
					"id": 45,
					"name": "ServiceMethodType",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "The type of service methods."
					},
					"children": [
						{
							"id": 47,
							"name": "serverStream",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A single request is followed by multiple responses (they\ncan be sent at different points in time).",
								"text": "Server streams can be used, e.g., by a web application to subscribe to\npush notifications.\n"
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 71,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "symbol"
							},
							"defaultValue": " Symbol('serverStream')"
						},
						{
							"id": 46,
							"name": "unary",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A single request is followed by a single response.\nUnary RPCs are the most common ones."
							},
							"sources": [
								{
									"fileName": "common/common.ts",
									"line": 63,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "symbol"
							},
							"defaultValue": " Symbol('unary')"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								47,
								46
							]
						}
					],
					"sources": [
						{
							"fileName": "common/common.ts",
							"line": 58,
							"character": 30
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						24
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						17
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						37
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						48,
						50,
						53,
						40,
						56
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						45
					]
				}
			],
			"sources": [
				{
					"fileName": "common/common.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 313,
			"name": "ModuleRpcContextClient",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/hadrienchauvin/code/rpc_ts/src/context/client/composite.ts",
			"comment": {
				"shortText": "Client-side code for the built-in context connectors.",
				"tags": [
					{
						"tag": "license",
						"text": "\nCopyright (c) Aiden.ai\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n"
					}
				]
			},
			"children": [
				{
					"id": 314,
					"name": "CompositeClientContextConnector",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 315,
							"name": "CompositeResponseContext",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "CompositeContext",
								"id": 288
							}
						}
					],
					"children": [
						{
							"id": 316,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 317,
									"name": "new CompositeClientContextConnector",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 318,
											"name": "clientContextConnectors",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CompositeClientContextConnectorsFor",
												"id": 324,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "CompositeResponseContext",
														"constraint": {
															"type": "reference",
															"name": "CompositeContext",
															"id": 288
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CompositeClientContextConnector",
										"id": 314
									}
								}
							],
							"sources": [
								{
									"fileName": "context/client/composite.ts",
									"line": 27,
									"character": 79
								}
							]
						},
						{
							"id": 321,
							"name": "decodeResponseContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 322,
									"name": "decodeResponseContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 323,
											"name": "encodedResponseContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "unknown",
												"name": "CompositeResponseContext"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ClientContextConnector.decodeResponseContext",
										"id": 66
									}
								}
							],
							"sources": [
								{
									"fileName": "context/client/composite.ts",
									"line": 47,
									"character": 29
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ClientContextConnector.decodeResponseContext",
								"id": 65
							}
						},
						{
							"id": 319,
							"name": "provideRequestContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 320,
									"name": "provideRequestContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ClientContextConnector.provideRequestContext",
										"id": 64
									}
								}
							],
							"sources": [
								{
									"fileName": "context/client/composite.ts",
									"line": 34,
									"character": 29
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ClientContextConnector.provideRequestContext",
								"id": 63
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								316
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								321,
								319
							]
						}
					],
					"sources": [
						{
							"fileName": "context/client/composite.ts",
							"line": 25,
							"character": 44
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ClientContextConnector",
							"id": 61,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "CompositeResponseContext",
									"constraint": {
										"type": "reference",
										"name": "CompositeContext",
										"id": 288
									}
								}
							]
						}
					]
				},
				{
					"id": 328,
					"name": "EmptyClientContextConnector",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 331,
							"name": "decodeResponseContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 332,
									"name": "decodeResponseContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 333,
											"name": "_encodedResponseContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EmptyResponseContext",
												"id": 293
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ClientContextConnector.decodeResponseContext",
										"id": 66
									}
								}
							],
							"sources": [
								{
									"fileName": "context/client/empty.ts",
									"line": 23,
									"character": 29
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ClientContextConnector.decodeResponseContext",
								"id": 65
							}
						},
						{
							"id": 329,
							"name": "provideRequestContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 330,
									"name": "provideRequestContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ClientContextConnector.provideRequestContext",
										"id": 64
									}
								}
							],
							"sources": [
								{
									"fileName": "context/client/empty.ts",
									"line": 19,
									"character": 29
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ClientContextConnector.provideRequestContext",
								"id": 63
							}
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								331,
								329
							]
						}
					],
					"sources": [
						{
							"fileName": "context/client/empty.ts",
							"line": 14,
							"character": 40
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ClientContextConnector",
							"id": 61,
							"typeArguments": [
								{
									"type": "reference",
									"name": "EmptyResponseContext",
									"id": 293
								}
							]
						}
					]
				},
				{
					"id": 335,
					"name": "TimestampClientContextConnector",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 338,
							"name": "decodeResponseContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 339,
									"name": "decodeResponseContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 340,
											"name": "encodedResponseContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "TimestampResponseContext",
												"id": 296
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ClientContextConnector.decodeResponseContext",
										"id": 66
									}
								}
							],
							"sources": [
								{
									"fileName": "context/client/timestamp.ts",
									"line": 23,
									"character": 29
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ClientContextConnector.decodeResponseContext",
								"id": 65
							}
						},
						{
							"id": 336,
							"name": "provideRequestContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 337,
									"name": "provideRequestContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ClientContextConnector.provideRequestContext",
										"id": 64
									}
								}
							],
							"sources": [
								{
									"fileName": "context/client/timestamp.ts",
									"line": 19,
									"character": 29
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ClientContextConnector.provideRequestContext",
								"id": 63
							}
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								338,
								336
							]
						}
					],
					"sources": [
						{
							"fileName": "context/client/timestamp.ts",
							"line": 14,
							"character": 44
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ClientContextConnector",
							"id": 61,
							"typeArguments": [
								{
									"type": "reference",
									"name": "TimestampResponseContext",
									"id": 296
								}
							]
						}
					]
				},
				{
					"id": 342,
					"name": "TokenAuthClientContextConnector",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Provide a client context connector that adds an 'authorization' header.",
						"text": "The bearer token to put can be given and refreshed through the `authenticate` method\n(when initialized, the `TokenAuthClientContextConnector` operates without any token\nand so no 'authorization' header is added).  Additionally, it is possible to specify\nan optional `refreshTokenHandler` that is automatically called `expiryDateOffsetMs`\nmilliseconds before the current token expires.\n"
					},
					"children": [
						{
							"id": 343,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Constructs a token auth client context connector.\nThe initial token must be provided with [[TokenAuthClientContextConnector.authenticate]].\nConstructs a token auth client context connector with a\nhandler that will be called to refresh the token when it expires.\nThe initial token must be provided with [[TokenAuthClientContextConnector.authenticate]]."
							},
							"signatures": [
								{
									"id": 344,
									"name": "new TokenAuthClientContextConnector",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Constructs a token auth client context connector.\nThe initial token must be provided with [[TokenAuthClientContextConnector.authenticate]]."
									},
									"type": {
										"type": "reference",
										"name": "TokenAuthClientContextConnector",
										"id": 342
									}
								},
								{
									"id": 345,
									"name": "new TokenAuthClientContextConnector",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Constructs a token auth client context connector with a\nhandler that will be called to refresh the token when it expires.\nThe initial token must be provided with [[TokenAuthClientContextConnector.authenticate]]."
									},
									"parameters": [
										{
											"id": 346,
											"name": "refreshTokenHandler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Given the refresh token of the current token info,\nreturns a new token info in order to extend the life time of the authentication."
											},
											"type": {
												"type": "reference",
												"name": "RefreshTokenHandler",
												"id": 365
											}
										},
										{
											"id": 347,
											"name": "expiryDateOffsetMs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The refresh token handler will be called `expiryDateOffsetMs`\nmilliseconds before the token expires."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 348,
											"name": "reportRefreshError",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Reports an error that occurred during the refresh (with\nauto refresh on, the refreshing occurred within a `setTimeout` and so in a different\nexecution context).\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 349,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 350,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 351,
																			"name": "err",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Error"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TokenAuthClientContextConnector",
										"id": 342
									}
								}
							],
							"sources": [
								{
									"fileName": "context/client/token_auth.ts",
									"line": 37,
									"character": 32
								},
								{
									"fileName": "context/client/token_auth.ts",
									"line": 44,
									"character": 16
								},
								{
									"fileName": "context/client/token_auth.ts",
									"line": 62,
									"character": 4
								}
							]
						},
						{
							"id": 352,
							"name": "authenticate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 353,
									"name": "authenticate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Provides an initial token info.",
										"text": "This function also sets up a `setInterval` to refresh the token periodically,\nunless `autoRefresh` is set to `false`.\n"
									},
									"parameters": [
										{
											"id": 354,
											"name": "tokenInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TokenInfo",
												"id": 305
											}
										},
										{
											"id": 355,
											"name": "autoRefresh",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "true"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "context/client/token_auth.ts",
									"line": 78,
									"character": 14
								}
							]
						},
						{
							"id": 356,
							"name": "clearAutoRefresh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 357,
									"name": "clearAutoRefresh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clear the auto refresh.",
										"text": "If the function is not called when one is finished with the connector,\nthe auto refresh keeps happening in the background.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "context/client/token_auth.ts",
									"line": 117,
									"character": 18
								}
							]
						},
						{
							"id": 362,
							"name": "decodeResponseContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 363,
									"name": "decodeResponseContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 364,
											"name": "_encodedResponseContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "TokenAuthResponseContext",
												"id": 304
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ClientContextConnector.decodeResponseContext",
										"id": 66
									}
								}
							],
							"sources": [
								{
									"fileName": "context/client/token_auth.ts",
									"line": 185,
									"character": 29
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ClientContextConnector.decodeResponseContext",
								"id": 65
							}
						},
						{
							"id": 358,
							"name": "forceRefreshToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 359,
									"name": "forceRefreshToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Forces a token refresh.  This function does nothing if no refresh handler or\nno refresh token was specified."
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "context/client/token_auth.ts",
									"line": 125,
									"character": 25
								}
							]
						},
						{
							"id": 360,
							"name": "provideRequestContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 361,
									"name": "provideRequestContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ClientContextConnector.provideRequestContext",
										"id": 64
									}
								}
							],
							"sources": [
								{
									"fileName": "context/client/token_auth.ts",
									"line": 147,
									"character": 29
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ClientContextConnector.provideRequestContext",
								"id": 63
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								343
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								352,
								356,
								362,
								358,
								360
							]
						}
					],
					"sources": [
						{
							"fileName": "context/client/token_auth.ts",
							"line": 31,
							"character": 44
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ClientContextConnector",
							"id": 61,
							"typeArguments": [
								{
									"type": "reference",
									"name": "TokenAuthResponseContext",
									"id": 304
								}
							]
						}
					]
				},
				{
					"id": 324,
					"name": "CompositeClientContextConnectorsFor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Maps the connector names to their client context connectors."
					},
					"typeParameter": [
						{
							"id": 325,
							"name": "ResponseContext",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "CompositeContext",
								"id": 288
							}
						}
					],
					"sources": [
						{
							"fileName": "context/client/composite.ts",
							"line": 17,
							"character": 47
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 326,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "context/client/composite.ts",
									"line": 19,
									"character": 3
								}
							]
						}
					}
				},
				{
					"id": 365,
					"name": "RefreshTokenHandler",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Takes a refresh token and returns a brand new token info."
					},
					"sources": [
						{
							"fileName": "context/client/token_auth.ts",
							"line": 18,
							"character": 31
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 366,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 367,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 368,
											"name": "refreshToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "TokenInfo",
												"id": 305
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "context/client/token_auth.ts",
									"line": 18,
									"character": 33
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						314,
						328,
						335,
						342
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						324,
						365
					]
				}
			],
			"sources": [
				{
					"fileName": "context/client/composite.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 287,
			"name": "ModuleRpcContextCommon",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/hadrienchauvin/code/rpc_ts/src/context/common/composite.ts",
			"comment": {
				"shortText": "Code common to the client and the server for the built-in client/server\ncontext connectors.",
				"tags": [
					{
						"tag": "license",
						"text": "\nCopyright (c) Aiden.ai\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n"
					}
				]
			},
			"children": [
				{
					"id": 288,
					"name": "CompositeContext",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A composite context is a map of the connector names to their context."
					},
					"indexSignature": {
						"id": 289,
						"name": "__index",
						"kind": 8192,
						"kindString": "Index signature",
						"flags": {},
						"comment": {
							"shortText": "A composite context is a map of the connector names to their context."
						},
						"parameters": [
							{
								"id": 290,
								"name": "connectorName",
								"kind": 32768,
								"kindString": "Parameter",
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "any"
						}
					},
					"sources": [
						{
							"fileName": "context/common/composite.ts",
							"line": 12,
							"character": 33
						}
					]
				},
				{
					"id": 292,
					"name": "EmptyRequestContext",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "context/common/empty.ts",
							"line": 12,
							"character": 36
						}
					]
				},
				{
					"id": 293,
					"name": "EmptyResponseContext",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "context/common/empty.ts",
							"line": 14,
							"character": 37
						}
					]
				},
				{
					"id": 295,
					"name": "TimestampRequestContext",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Timestamp request context."
					},
					"sources": [
						{
							"fileName": "context/common/timestamp.ts",
							"line": 12,
							"character": 40
						}
					]
				},
				{
					"id": 296,
					"name": "TimestampResponseContext",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Timestamp response context."
					},
					"children": [
						{
							"id": 297,
							"name": "date",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "RFC3339-formatted response date"
							},
							"sources": [
								{
									"fileName": "context/common/timestamp.ts",
									"line": 17,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								297
							]
						}
					],
					"sources": [
						{
							"fileName": "context/common/timestamp.ts",
							"line": 15,
							"character": 41
						}
					]
				},
				{
					"id": 301,
					"name": "TokenAuthRequestContext",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The request context containing a number of claims (\"the user ID is...\",\n\"the user is logged in as an admin\", \"the user uses the English locale\", ...).\nThe claims are obtained from the token contained in the 'authorization' header."
					},
					"typeParameter": [
						{
							"id": 302,
							"name": "AuthClaims",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 303,
							"name": "authClaims",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "context/common/token_auth.ts",
									"line": 17,
									"character": 12
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "AuthClaims"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								303
							]
						}
					],
					"sources": [
						{
							"fileName": "context/common/token_auth.ts",
							"line": 16,
							"character": 40
						}
					]
				},
				{
					"id": 304,
					"name": "TokenAuthResponseContext",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "context/common/token_auth.ts",
							"line": 20,
							"character": 41
						}
					]
				},
				{
					"id": 305,
					"name": "TokenInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A generic token info that adds context to a bearer token."
					},
					"children": [
						{
							"id": 307,
							"name": "expiryDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The expiry date of the bearer token (RFC3339-formatted)."
							},
							"sources": [
								{
									"fileName": "context/common/token_auth.ts",
									"line": 33,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 308,
							"name": "refreshToken",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The refresh token.  This refresh token can be used to obtain a new bearer token."
							},
							"sources": [
								{
									"fileName": "context/common/token_auth.ts",
									"line": 36,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 306,
							"name": "token",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bearer token."
							},
							"sources": [
								{
									"fileName": "context/common/token_auth.ts",
									"line": 30,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								307,
								308,
								306
							]
						}
					],
					"sources": [
						{
							"fileName": "context/common/token_auth.ts",
							"line": 28,
							"character": 26
						}
					]
				},
				{
					"id": 298,
					"name": "timestampContextKeys",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "Keys used to encode the Timestamp contexts"
					},
					"children": [
						{
							"id": 299,
							"name": "serverTimestamp",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "context/common/timestamp.ts",
									"line": 22,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"x-server-timestamp\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								299
							]
						}
					],
					"sources": [
						{
							"fileName": "context/common/timestamp.ts",
							"line": 21,
							"character": 33
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 309,
					"name": "tokenAuthContextKeys",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "Keys used to encode the contexts."
					},
					"children": [
						{
							"id": 310,
							"name": "authorization",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "context/common/token_auth.ts",
									"line": 24,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"authorization\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								310
							]
						}
					],
					"sources": [
						{
							"fileName": "context/common/token_auth.ts",
							"line": 23,
							"character": 33
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						288,
						292,
						293,
						295,
						296,
						301,
						304,
						305
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						298,
						309
					]
				}
			],
			"sources": [
				{
					"fileName": "context/common/composite.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 450,
			"name": "ModuleRpcContextServer",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/hadrienchauvin/code/rpc_ts/src/context/server/composite.ts",
			"comment": {
				"shortText": "Server-side code for the built-in context connectors.",
				"tags": [
					{
						"tag": "license",
						"text": "\nCopyright (c) Aiden.ai\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n"
					}
				]
			},
			"children": [
				{
					"id": 451,
					"name": "CompositeServerContextConnector",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 452,
							"name": "RequestContext",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "CompositeContext",
								"id": 288
							}
						}
					],
					"children": [
						{
							"id": 453,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 454,
									"name": "new CompositeServerContextConnector",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 455,
											"name": "contextConnectors",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CompositeServerContextConnectorsFor",
												"id": 461,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "RequestContext",
														"constraint": {
															"type": "reference",
															"name": "CompositeContext",
															"id": 288
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CompositeServerContextConnector",
										"id": 451
									}
								}
							],
							"sources": [
								{
									"fileName": "context/server/composite.ts",
									"line": 27,
									"character": 69
								}
							]
						},
						{
							"id": 456,
							"name": "decodeRequestContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 457,
									"name": "decodeRequestContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 458,
											"name": "encodedRequestContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "unknown",
												"name": "RequestContext"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ServerContextConnector.decodeRequestContext",
										"id": 416
									}
								}
							],
							"sources": [
								{
									"fileName": "context/server/composite.ts",
									"line": 34,
									"character": 28
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ServerContextConnector.decodeRequestContext",
								"id": 415
							}
						},
						{
							"id": 459,
							"name": "provideResponseContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 460,
									"name": "provideResponseContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "context/server/composite.ts",
									"line": 46,
									"character": 30
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ServerContextConnector.provideResponseContext",
								"id": 418
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								453
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								456,
								459
							]
						}
					],
					"sources": [
						{
							"fileName": "context/server/composite.ts",
							"line": 25,
							"character": 44
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ServerContextConnector",
							"id": 413,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "RequestContext",
									"constraint": {
										"type": "reference",
										"name": "CompositeContext",
										"id": 288
									}
								}
							]
						}
					]
				},
				{
					"id": 465,
					"name": "EmptyServerContextConnector",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 466,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 467,
									"name": "new EmptyServerContextConnector",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EmptyServerContextConnector",
										"id": 465
									}
								}
							],
							"sources": [
								{
									"fileName": "context/server/empty.ts",
									"line": 18,
									"character": 7
								}
							]
						},
						{
							"id": 468,
							"name": "decodeRequestContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 469,
									"name": "decodeRequestContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 470,
											"name": "_encodedRequestContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EmptyRequestContext",
												"id": 292
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ServerContextConnector.decodeRequestContext",
										"id": 416
									}
								}
							],
							"sources": [
								{
									"fileName": "context/server/empty.ts",
									"line": 21,
									"character": 28
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ServerContextConnector.decodeRequestContext",
								"id": 415
							}
						},
						{
							"id": 471,
							"name": "provideResponseContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 472,
									"name": "provideResponseContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "context/server/empty.ts",
									"line": 27,
									"character": 30
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ServerContextConnector.provideResponseContext",
								"id": 418
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								466
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								468,
								471
							]
						}
					],
					"sources": [
						{
							"fileName": "context/server/empty.ts",
							"line": 14,
							"character": 40
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ServerContextConnector",
							"id": 413,
							"typeArguments": [
								{
									"type": "reference",
									"name": "EmptyRequestContext",
									"id": 292
								}
							]
						}
					]
				},
				{
					"id": 474,
					"name": "TimestampServerContextConnector",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 475,
							"name": "decodeRequestContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 476,
									"name": "decodeRequestContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 477,
											"name": "_encodedRequestContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "TimestampRequestContext",
												"id": 295
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ServerContextConnector.decodeRequestContext",
										"id": 416
									}
								}
							],
							"sources": [
								{
									"fileName": "context/server/timestamp.ts",
									"line": 20,
									"character": 28
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ServerContextConnector.decodeRequestContext",
								"id": 415
							}
						},
						{
							"id": 478,
							"name": "provideResponseContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 479,
									"name": "provideResponseContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "context/server/timestamp.ts",
									"line": 26,
									"character": 30
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ServerContextConnector.provideResponseContext",
								"id": 418
							}
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								475,
								478
							]
						}
					],
					"sources": [
						{
							"fileName": "context/server/timestamp.ts",
							"line": 15,
							"character": 44
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ServerContextConnector",
							"id": 413,
							"typeArguments": [
								{
									"type": "reference",
									"name": "TimestampRequestContext",
									"id": 295
								}
							]
						}
					]
				},
				{
					"id": 494,
					"name": "TokenAuthServerContextConnector",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 495,
							"name": "AuthClaims",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 496,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 497,
									"name": "new TokenAuthServerContextConnector",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 498,
											"name": "authClaimsHandler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AuthClaimsHandler",
												"id": 488,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "AuthClaims"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TokenAuthServerContextConnector",
										"id": 494
									}
								}
							],
							"sources": [
								{
									"fileName": "context/server/token_auth.ts",
									"line": 22,
									"character": 7
								}
							]
						},
						{
							"id": 499,
							"name": "decodeRequestContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 500,
									"name": "decodeRequestContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 501,
											"name": "encodedRequestContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "TokenAuthRequestContext",
												"id": 301,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "AuthClaims"
													}
												]
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ServerContextConnector.decodeRequestContext",
										"id": 416
									}
								}
							],
							"sources": [
								{
									"fileName": "context/server/token_auth.ts",
									"line": 27,
									"character": 28
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ServerContextConnector.decodeRequestContext",
								"id": 415
							}
						},
						{
							"id": 502,
							"name": "provideResponseContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 503,
									"name": "provideResponseContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "context/server/token_auth.ts",
									"line": 57,
									"character": 30
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ServerContextConnector.provideResponseContext",
								"id": 418
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								496
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								499,
								502
							]
						}
					],
					"sources": [
						{
							"fileName": "context/server/token_auth.ts",
							"line": 18,
							"character": 44
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ServerContextConnector",
							"id": 413,
							"typeArguments": [
								{
									"type": "reference",
									"name": "TokenAuthRequestContext",
									"id": 301,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "AuthClaims"
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 481,
					"name": "TokenValidationError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "There was an error during token validation."
					},
					"children": [
						{
							"id": 485,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 486,
									"name": "new TokenValidationError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 487,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TokenValidationError",
										"id": 481
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseError.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.__constructor"
							}
						},
						{
							"id": 482,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.message"
							}
						},
						{
							"id": 483,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 22,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.name"
							}
						},
						{
							"id": 484,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.stack"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								485
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								482,
								483,
								484
							]
						}
					],
					"sources": [
						{
							"fileName": "context/server/token_auth_handler.ts",
							"line": 24,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseError"
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 505,
					"name": "EncodedJwtAuthClaims",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The authentication claims are given in JWT as a string map."
					},
					"indexSignature": {
						"id": 506,
						"name": "__index",
						"kind": 8192,
						"kindString": "Index signature",
						"flags": {},
						"comment": {
							"shortText": "The authentication claims are given in JWT as a string map."
						},
						"parameters": [
							{
								"id": 507,
								"name": "key",
								"kind": 32768,
								"kindString": "Parameter",
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"sources": [
						{
							"fileName": "context/server/token_auth_jwt_handler.ts",
							"line": 37,
							"character": 37
						}
					]
				},
				{
					"id": 488,
					"name": "AuthClaimsHandler",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Obtains a number of authentication claims\n(\"the user ID is...\", \"the user is logged in as an admin\", \"the user uses\nthe English locale\", ...) from an access token.",
						"tags": [
							{
								"tag": "throws",
								"text": "`TokenValidationError` in case the token is not valid.\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 489,
							"name": "AuthClaims",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "context/server/token_auth_handler.ts",
							"line": 19,
							"character": 29
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 490,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 491,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 492,
											"name": "token",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "AuthClaims"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "context/server/token_auth_handler.ts",
									"line": 19,
									"character": 43
								}
							]
						}
					}
				},
				{
					"id": 461,
					"name": "CompositeServerContextConnectorsFor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Maps the connector names to their server context connectors."
					},
					"typeParameter": [
						{
							"id": 462,
							"name": "RequestContext",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "CompositeContext",
								"id": 288
							}
						}
					],
					"sources": [
						{
							"fileName": "context/server/composite.ts",
							"line": 17,
							"character": 47
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 463,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "context/server/composite.ts",
									"line": 19,
									"character": 3
								}
							]
						}
					}
				},
				{
					"id": 508,
					"name": "JwtAuthClaimsDecoder",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Decodes raw JWT claims into a custom data type."
					},
					"typeParameter": [
						{
							"id": 509,
							"name": "AuthClaims",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "context/server/token_auth_jwt_handler.ts",
							"line": 44,
							"character": 32
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 510,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 511,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 512,
											"name": "encodedClaims",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EncodedJwtAuthClaims",
												"id": 505
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "AuthClaims"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "context/server/token_auth_jwt_handler.ts",
									"line": 44,
									"character": 46
								}
							]
						}
					}
				},
				{
					"id": 513,
					"name": "getJwtAuthClaimsHandler",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 514,
							"name": "getJwtAuthClaimsHandler",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets an [[AuthClaimsHandler]] that extracts authentication claims from JWT tokens.",
								"tags": [
									{
										"tag": "throws",
										"text": "`TokenValidationError` if the token is invalid.\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 515,
									"name": "AuthClaims",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 516,
									"name": "jwksUrl",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The URL from which to retrieve the JSON-serialized Web Key Set (JWKS)\nused to validate the JWT tokens."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 517,
									"name": "expectedAudiences",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The audiences expected from the JWT tokens (the 'aud'\nauthentication claim must be included in this list)."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 518,
									"name": "decodeClaims",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Decode raw JWT claims into a custom data type.\n"
									},
									"type": {
										"type": "reference",
										"name": "JwtAuthClaimsDecoder",
										"id": 508,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "AuthClaims"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthClaimsHandler",
								"id": 488,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "AuthClaims"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "context/server/token_auth_jwt_handler.ts",
							"line": 59,
							"character": 39
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						451,
						465,
						474,
						494,
						481
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						505
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						488,
						461,
						508
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						513
					]
				}
			],
			"sources": [
				{
					"fileName": "context/server/composite.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 590,
			"name": "ModuleRpcProtocolClient",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/hadrienchauvin/code/rpc_ts/src/protocol/client/client.ts",
			"comment": {
				"shortText": "This module provides a simplified interface for instantiating an RPC client.\nUnder the hood, it is a thin wrapper around [[ModuleRpcProtocolGrpcWebClient.getGrpcWebClient]],\nand it provides a gRPC-Web transportation protocol with JSON encoding/decoding.  Other\nprotocols could be offered here in the future, and [[getRpcClient]] would be used\nto easily choose between them.",
				"tags": [
					{
						"tag": "see",
						"text": "[[ModuleRpcProtocolServer]]\n"
					},
					{
						"tag": "license",
						"text": "\nCopyright (c) Aiden.ai\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n"
					}
				]
			},
			"children": [
				{
					"id": 591,
					"name": "RpcClientOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 592,
							"name": "remoteAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The remote address to connect to (example: https://test.com:8000)."
							},
							"sources": [
								{
									"fileName": "protocol/client/client.ts",
									"line": 28,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								592
							]
						}
					],
					"sources": [
						{
							"fileName": "protocol/client/client.ts",
							"line": 26,
							"character": 33
						}
					]
				},
				{
					"id": 593,
					"name": "getRpcClient",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 594,
							"name": "getRpcClient",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 595,
									"name": "serviceDefinition",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ModuleRpcCommon.ServiceDefinition",
										"id": 40
									}
								}
							],
							"parameters": [
								{
									"id": 596,
									"name": "serviceDefinition",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "serviceDefinition",
										"constraint": {
											"type": "reference",
											"name": "ModuleRpcCommon.ServiceDefinition",
											"id": 40
										}
									}
								},
								{
									"id": 597,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RpcClientOptions",
										"id": 591
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Service",
								"id": 212,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition",
										"constraint": {
											"type": "reference",
											"name": "ModuleRpcCommon.ServiceDefinition",
											"id": 40
										}
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						},
						{
							"id": 598,
							"name": "getRpcClient",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 599,
									"name": "serviceDefinition",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ModuleRpcCommon.ServiceDefinition",
										"id": 40
									}
								},
								{
									"id": 600,
									"name": "ResponseContext",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 601,
									"name": "serviceDefinition",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "serviceDefinition",
										"constraint": {
											"type": "reference",
											"name": "ModuleRpcCommon.ServiceDefinition",
											"id": 40
										}
									}
								},
								{
									"id": 602,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "RpcClientOptions",
												"id": 591
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 603,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "protocol/client/client.ts",
															"line": 42,
															"character": 29
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Service",
								"id": 212,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition",
										"constraint": {
											"type": "reference",
											"name": "ModuleRpcCommon.ServiceDefinition",
											"id": 40
										}
									},
									{
										"type": "typeParameter",
										"name": "ResponseContext"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "protocol/client/client.ts",
							"line": 31,
							"character": 28
						},
						{
							"fileName": "protocol/client/client.ts",
							"line": 37,
							"character": 28
						},
						{
							"fileName": "protocol/client/client.ts",
							"line": 48,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						591
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						593
					]
				}
			],
			"sources": [
				{
					"fileName": "protocol/client/client.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 574,
			"name": "ModuleRpcProtocolGrpcWebClient",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/hadrienchauvin/code/rpc_ts/src/protocol/grpc_web/client/client.ts",
			"comment": {
				"shortText": "Client-side implementation of the gRPC-Web protocol.",
				"tags": [
					{
						"tag": "see",
						"text": "The [gRPC-Web reference implementation of a JavaScript client](https://github.com/grpc/grpc-web),\nbased on a Protocol Buffer codec, and also this\n[TypeScript-first implementation](https://github.com/improbable-eng/grpc-web) of a gRPC-Web client,\nagain with Protocol Buffers.\n"
					},
					{
						"tag": "license",
						"text": "\nCopyright (c) Aiden.ai\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n"
					}
				]
			},
			"children": [
				{
					"id": 575,
					"name": "GrpcWebClientOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options for the RPC client of the gRPC-Web protocol."
					},
					"children": [
						{
							"id": 581,
							"name": "codec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The Codec to use.  By default, we use the [[GrpcWebJsonCodec]] codec.  The Codec must match\nthe Codec used by the server (this is enforced through content-type negotiation)."
							},
							"sources": [
								{
									"fileName": "protocol/grpc_web/client/client.ts",
									"line": 49,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "GrpcWebCodec",
								"id": 522
							}
						},
						{
							"id": 577,
							"name": "getTransport",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Optional transport mechanism override.  A `Transport` is a low-level implementation that can\ntalk to an HTTP server.  The actual transport depends on the runtime (NodeJS, a particular\nbrowser), and if not specified `grpc-web-client` select the most appropriate one."
							},
							"sources": [
								{
									"fileName": "protocol/grpc_web/client/client.ts",
									"line": 43,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 578,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 579,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 580,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "TransportOptions"
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Transport"
															},
															{
																"type": "reference",
																"name": "Error"
															}
														]
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 576,
							"name": "remoteAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The remote address to connect to (example: `\"https://test.com:8000\"`)."
							},
							"sources": [
								{
									"fileName": "protocol/grpc_web/client/client.ts",
									"line": 36,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								581,
								577,
								576
							]
						}
					],
					"sources": [
						{
							"fileName": "protocol/grpc_web/client/client.ts",
							"line": 34,
							"character": 37
						}
					]
				},
				{
					"id": 582,
					"name": "getGrpcWebClient",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 583,
							"name": "getGrpcWebClient",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an RPC client for the gRPC-Web protocol.",
								"tags": [
									{
										"tag": "see",
										"text": "[[getRpcClient]] offers a more generic interface and is enough\nfor most use cases.\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 584,
									"name": "serviceDefinition",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"text": "The definition of the service for which to implement a client."
									},
									"type": {
										"type": "reference",
										"name": "ModuleRpcCommon.ServiceDefinition",
										"id": 40
									}
								},
								{
									"id": 585,
									"name": "ResponseContext",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 586,
									"name": "serviceDefinition",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "serviceDefinition",
										"constraint": {
											"type": "reference",
											"name": "ModuleRpcCommon.ServiceDefinition",
											"id": 40
										}
									}
								},
								{
									"id": 587,
									"name": "clientContextConnector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The context connector to use to inject metadata (such\nas authentication/authorization metadata) to the RPC.  If one wishes to not inject\nany metadata, [[ModuleRpcContextClient.EmptyClientContextConnector]] can used."
									},
									"type": {
										"type": "reference",
										"name": "ClientContextConnector",
										"id": 61,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ResponseContext"
											}
										]
									}
								},
								{
									"id": 588,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Various options to change the behavior of the client, include the\naddress of the server to connect to.\n"
									},
									"type": {
										"type": "reference",
										"name": "GrpcWebClientOptions",
										"id": 575
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Service",
								"id": 212,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition",
										"constraint": {
											"type": "reference",
											"name": "ModuleRpcCommon.ServiceDefinition",
											"id": 40
										}
									},
									{
										"type": "typeParameter",
										"name": "ResponseContext"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "protocol/grpc_web/client/client.ts",
							"line": 65,
							"character": 32
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						575
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						582
					]
				}
			],
			"sources": [
				{
					"fileName": "protocol/grpc_web/client/client.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 521,
			"name": "ModuleRpcProtocolGrpcWebCommon",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/hadrienchauvin/code/rpc_ts/src/protocol/grpc_web/common/codec.ts",
			"comment": {
				"shortText": "Definitions common to both the client- and server-sides of the gRPC-Web protocol.",
				"tags": [
					{
						"tag": "see",
						"text": "https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md\n"
					},
					{
						"tag": "license",
						"text": "\nCopyright (c) Aiden.ai\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n"
					}
				]
			},
			"children": [
				{
					"id": 549,
					"name": "GrpcWebJsonCodec",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Codec that serializes/deserializes messages to and from JSON."
					},
					"children": [
						{
							"id": 567,
							"name": "decodeMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 568,
									"name": "decodeMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "override",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 569,
											"name": "_method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 570,
											"name": "encodedMessage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"implementationOf": {
										"type": "reference",
										"name": "GrpcWebCodec.decodeMessage",
										"id": 539
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/common/json_codec.ts",
									"line": 61,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "GrpcWebCodec.decodeMessage",
								"id": 538
							}
						},
						{
							"id": 563,
							"name": "decodeRequest",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 564,
									"name": "decodeRequest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "override",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 565,
											"name": "_method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 566,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"implementationOf": {
										"type": "reference",
										"name": "GrpcWebCodec.decodeRequest",
										"id": 531
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/common/json_codec.ts",
									"line": 56,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "GrpcWebCodec.decodeRequest",
								"id": 530
							}
						},
						{
							"id": 571,
							"name": "decodeTrailer",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 572,
									"name": "decodeTrailer",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "override",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 573,
											"name": "encodedTrailer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "grpc.Metadata"
									},
									"implementationOf": {
										"type": "reference",
										"name": "GrpcWebCodec.decodeTrailer",
										"id": 546
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/common/json_codec.ts",
									"line": 66,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "GrpcWebCodec.decodeTrailer",
								"id": 545
							}
						},
						{
							"id": 552,
							"name": "encodeMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 553,
									"name": "encodeMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "override",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 554,
											"name": "_method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 555,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/common/json_codec.ts",
									"line": 32,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "GrpcWebCodec.encodeMessage",
								"id": 534
							}
						},
						{
							"id": 559,
							"name": "encodeRequest",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 560,
									"name": "encodeRequest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "override",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 561,
											"name": "_method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 562,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/common/json_codec.ts",
									"line": 51,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "GrpcWebCodec.encodeRequest",
								"id": 526
							}
						},
						{
							"id": 556,
							"name": "encodeTrailer",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 557,
									"name": "encodeTrailer",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "override",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 558,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "grpc.Metadata"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									},
									"implementationOf": {
										"type": "reference",
										"name": "GrpcWebCodec.encodeTrailer",
										"id": 543
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/common/json_codec.ts",
									"line": 37,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "GrpcWebCodec.encodeTrailer",
								"id": 542
							}
						},
						{
							"id": 550,
							"name": "getContentType",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 551,
									"name": "getContentType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "override",
												"text": ""
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"implementationOf": {
										"type": "reference",
										"name": "GrpcWebCodec.getContentType",
										"id": 525
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/common/json_codec.ts",
									"line": 27,
									"character": 16
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "GrpcWebCodec.getContentType",
								"id": 524
							}
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								567,
								563,
								571,
								552,
								559,
								556,
								550
							]
						}
					],
					"sources": [
						{
							"fileName": "protocol/grpc_web/common/json_codec.ts",
							"line": 25,
							"character": 29
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "GrpcWebCodec",
							"id": 522
						}
					]
				},
				{
					"id": 522,
					"name": "GrpcWebCodec",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Serializes/encodes and deserializes/decodes the requests and responses from their\nin-memory representation to an encoded representation that can be transmitted on the wire.",
						"text": "A `GrpcWebCodec` instance can be tied to a particular RPC service (that is why the\n`method` argument is passed to some of the methods in the Codec).\n\nEncoding proceeds from a generic `Message` type to an array of bytes (`Uint8Array`).\n"
					},
					"typeParameter": [
						{
							"id": 523,
							"name": "Message",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 538,
							"name": "decodeMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 539,
									"name": "decodeMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Decodes a message."
									},
									"parameters": [
										{
											"id": 540,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 541,
											"name": "encodedMessage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "Message"
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/common/codec.ts",
									"line": 40,
									"character": 15
								}
							]
						},
						{
							"id": 530,
							"name": "decodeRequest",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 531,
									"name": "decodeRequest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Decodes a request for the RPC method `method`."
									},
									"parameters": [
										{
											"id": 532,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 533,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "Message"
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/common/codec.ts",
									"line": 32,
									"character": 15
								}
							]
						},
						{
							"id": 545,
							"name": "decodeTrailer",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 546,
									"name": "decodeTrailer",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Decodes a trailer."
									},
									"parameters": [
										{
											"id": 547,
											"name": "encodedTrailer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "grpc.Metadata"
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/common/codec.ts",
									"line": 46,
									"character": 15
								}
							]
						},
						{
							"id": 534,
							"name": "encodeMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 535,
									"name": "encodeMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Encodes a message (part of the RPC response) for the RPC method `method`."
									},
									"parameters": [
										{
											"id": 536,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 537,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "Message"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/common/codec.ts",
									"line": 37,
									"character": 15
								}
							]
						},
						{
							"id": 526,
							"name": "encodeRequest",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 527,
									"name": "encodeRequest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Encodes a request for the RPC method `method`."
									},
									"parameters": [
										{
											"id": 528,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 529,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "Message"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/common/codec.ts",
									"line": 29,
									"character": 15
								}
							]
						},
						{
							"id": 542,
							"name": "encodeTrailer",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 543,
									"name": "encodeTrailer",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Encodes a trailer metadata (part of the RPC response)."
									},
									"parameters": [
										{
											"id": 544,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "grpc.Metadata"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/common/codec.ts",
									"line": 43,
									"character": 15
								}
							]
						},
						{
							"id": 524,
							"name": "getContentType",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 525,
									"name": "getContentType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the content type to put as HTTP headers (Accept and Content-Type) for\ncontent negotiation."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/common/codec.ts",
									"line": 26,
									"character": 16
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								538,
								530,
								545,
								534,
								526,
								542,
								524
							]
						}
					],
					"sources": [
						{
							"fileName": "protocol/grpc_web/common/codec.ts",
							"line": 21,
							"character": 29
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "GrpcWebJsonCodec",
							"id": 549
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						549
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						522
					]
				}
			],
			"sources": [
				{
					"fileName": "protocol/grpc_web/common/codec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 607,
			"name": "ModuleRpcProtocolGrpcWebServer",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/hadrienchauvin/code/rpc_ts/src/protocol/grpc_web/server/server.ts",
			"comment": {
				"shortText": "Server-side implementation of the gRPC-Web protocol.",
				"tags": [
					{
						"tag": "license",
						"text": "\nCopyright (c) Aiden.ai\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n"
					}
				]
			},
			"children": [
				{
					"id": 614,
					"name": "ErrorContext",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Context of an error that occurred during the processing of an RPC request by an RPC server."
					},
					"children": [
						{
							"id": 615,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The full URL of the service method that errored (`<remoteAddress>/<method>`)."
							},
							"sources": [
								{
									"fileName": "protocol/grpc_web/server/server.ts",
									"line": 85,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								615
							]
						}
					],
					"sources": [
						{
							"fileName": "protocol/grpc_web/server/server.ts",
							"line": 83,
							"character": 29
						}
					]
				},
				{
					"id": 608,
					"name": "GrpcWebServerOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options for the RPC server of the gRPC-Web protocol."
					},
					"typeParameter": [
						{
							"id": 609,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.ServiceDefinition",
								"id": 40
							}
						}
					],
					"children": [
						{
							"id": 613,
							"name": "codec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The Codec to use.  By default, we use the [[GrpcWebJsonCodec]] codec.  The Codec must match\nthe Codec used by the client (this is enforced through content-type negotiation)."
							},
							"sources": [
								{
									"fileName": "protocol/grpc_web/server/server.ts",
									"line": 62,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "GrpcWebCodec",
								"id": 522,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition",
										"constraint": {
											"type": "reference",
											"name": "ModuleRpcCommon.ServiceDefinition",
											"id": 40
										}
									}
								]
							}
						},
						{
							"id": 611,
							"name": "reportError",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A function to report errors that occurred during RPCs."
							},
							"sources": [
								{
									"fileName": "protocol/grpc_web/server/server.ts",
									"line": 48,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "ReportErrorHandler",
								"id": 616
							}
						},
						{
							"id": 610,
							"name": "router",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The express router to start from.  By default, we start from `Router()`."
							},
							"sources": [
								{
									"fileName": "protocol/grpc_web/server/server.ts",
									"line": 45,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Router"
							}
						},
						{
							"id": 612,
							"name": "useCompression",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Use compression on response bodies.  Compression can be disabled as it is a security issue\n(see https://www.blackhat.com/docs/asia-16/materials/asia-16-Karakostas-Practical-New-Developments-In-The-BREACH-Attack-wp.pdf\nfor a good overview).  To mitigate this we recommend, among other things, to use metadata\nto pass \"master\" secrets (such as session secrets) around."
							},
							"sources": [
								{
									"fileName": "protocol/grpc_web/server/server.ts",
									"line": 56,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								613,
								611,
								610,
								612
							]
						}
					],
					"sources": [
						{
							"fileName": "protocol/grpc_web/server/server.ts",
							"line": 41,
							"character": 37
						}
					]
				},
				{
					"id": 616,
					"name": "ReportErrorHandler",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Reports an error that occurred during the processing of an RPC request\nby an RPC server.",
						"text": "The function is not expected to throw.  However, if it throws, the error is safely\ncaptured and outputted to the command line (avoiding an infinite loop).\n",
						"tags": [
							{
								"tag": "param",
								"text": "The error to report.",
								"param": "err"
							},
							{
								"tag": "param",
								"text": "Additional context surrounding this error.\n",
								"param": "errorContext"
							}
						]
					},
					"sources": [
						{
							"fileName": "protocol/grpc_web/server/server.ts",
							"line": 75,
							"character": 30
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 617,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 618,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 619,
											"name": "err",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 620,
											"name": "errorContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ErrorContext",
												"id": 614
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "protocol/grpc_web/server/server.ts",
									"line": 75,
									"character": 32
								}
							]
						}
					}
				},
				{
					"id": 621,
					"name": "registerGrpcWebRoutes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 622,
							"name": "registerGrpcWebRoutes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Registers the API routes of an RPC service for the gRPC-Web protocol.",
								"tags": [
									{
										"tag": "see",
										"text": "[[registerRpcRoutes]] offers a more generic interface and is enough\nfor most use cases.\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 623,
									"name": "serviceDefinition",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"text": "The definition of the service for which to implement a client."
									},
									"type": {
										"type": "reference",
										"name": "ModuleRpcCommon.ServiceDefinition",
										"id": 40
									}
								},
								{
									"id": 624,
									"name": "RequestContext",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 625,
									"name": "serviceDefinition",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "serviceDefinition",
										"constraint": {
											"type": "reference",
											"name": "ModuleRpcCommon.ServiceDefinition",
											"id": 40
										}
									}
								},
								{
									"id": 626,
									"name": "serviceHandler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The handler that actually implements each of the methods of the service."
									},
									"type": {
										"type": "reference",
										"name": "ModuleRpcServer.ServiceHandlerFor",
										"id": 433,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "serviceDefinition",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.ServiceDefinition",
													"id": 40
												}
											},
											{
												"type": "typeParameter",
												"name": "RequestContext"
											}
										]
									}
								},
								{
									"id": 627,
									"name": "serverContextConnector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The context connector to use to inject metadata (such\nas authentication/authorization metadata) to the RPC.  If one wishes to not inject\nany metadata, [[ModuleRpcContextServer.EmptyServerContextConnector]] can used."
									},
									"type": {
										"type": "reference",
										"name": "ServerContextConnector",
										"id": 413,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "RequestContext"
											}
										]
									}
								},
								{
									"id": 628,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Various options to change the behavior of the server, including logging.\n"
									},
									"type": {
										"type": "reference",
										"name": "GrpcWebServerOptions",
										"id": 608,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "serviceDefinition",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.ServiceDefinition",
													"id": 40
												}
											}
										]
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Router"
							}
						}
					],
					"sources": [
						{
							"fileName": "protocol/grpc_web/server/server.ts",
							"line": 107,
							"character": 37
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						614,
						608
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						616
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						621
					]
				}
			],
			"sources": [
				{
					"fileName": "protocol/grpc_web/server/server.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 630,
			"name": "ModuleRpcProtocolMock",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/hadrienchauvin/code/rpc_ts/src/protocol/mock/mock.ts",
			"comment": {
				"tags": [
					{
						"tag": "license",
						"text": "\nCopyright (c) Aiden.ai\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n"
					}
				]
			},
			"children": [
				{
					"id": 631,
					"name": "getMockRpcClient",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 632,
							"name": "getMockRpcClient",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Mocks an RPC client, calling a stream producer that can be used to mock\nserver responses.",
								"tags": [
									{
										"tag": "example",
										"text": "```Typescript\nconst serviceDefinition = {\n  foo: { request: {}, response: {} as { bar: number } },\n};\nconst client = getMockRpcClient(serviceDefinition, (method, request) => {\n  console.log(\n    'RPC:',\n    method,\n    request instanceof Function ? request() : request,\n  );\n  return ModuleRpcClient.streamFromArray([\n    { response: { bar: 1 } },\n  ]) as ModuleRpcClient.Stream<any>;\n});\nconst { bar } = await client.nice().foo({});\nexpect(bar).to.equal(1);\n```\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 633,
									"name": "serviceDefinition",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ModuleRpcCommon.ServiceDefinition",
										"id": 40
									}
								},
								{
									"id": 634,
									"name": "ResponseContext",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 635,
									"name": "serviceDefinition",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "serviceDefinition",
										"constraint": {
											"type": "reference",
											"name": "ModuleRpcCommon.ServiceDefinition",
											"id": 40
										}
									}
								},
								{
									"id": 636,
									"name": "streamProducer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "StreamProducer",
										"id": 121
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Service",
								"id": 212,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition",
										"constraint": {
											"type": "reference",
											"name": "ModuleRpcCommon.ServiceDefinition",
											"id": 40
										}
									},
									{
										"type": "typeParameter",
										"name": "ResponseContext"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "protocol/mock/mock.ts",
							"line": 38,
							"character": 32
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						631
					]
				}
			],
			"sources": [
				{
					"fileName": "protocol/mock/mock.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 638,
			"name": "ModuleRpcProtocolServer",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/hadrienchauvin/code/rpc_ts/src/protocol/server/server.ts",
			"comment": {
				"shortText": "This module provides a simplified interface for instantiating an RPC server.\nUnder the hood, it is a thin wrapper around\n[[ModuleRpcProtocolGrpcWebServer.registerGrpcWebRoutes]],\nand it provides a gRPC-Web transportation protocol with JSON encoding/decoding.  Other\nprotocols could be offered here in the future, and [[registerRpcRoutes]] would be used\nto easily choose between them.",
				"tags": [
					{
						"tag": "see",
						"text": "[[ModuleRpcProtocolClient]]\n"
					},
					{
						"tag": "license",
						"text": "\nCopyright (c) Aiden.ai\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n"
					}
				]
			},
			"children": [
				{
					"id": 639,
					"name": "RpcServerOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 641,
							"name": "captureError",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A function to capture errors that occurred during RPCs."
							},
							"sources": [
								{
									"fileName": "protocol/server/server.ts",
									"line": 33,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 642,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 643,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 644,
															"name": "err",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Error"
															}
														},
														{
															"id": 645,
															"name": "errorContext",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 646,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "protocol/server/server.ts",
																			"line": 33,
																			"character": 43
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 640,
							"name": "router",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The express router to start from.  By default, we start from `Router()`."
							},
							"sources": [
								{
									"fileName": "protocol/server/server.ts",
									"line": 30,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Router"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								641,
								640
							]
						}
					],
					"sources": [
						{
							"fileName": "protocol/server/server.ts",
							"line": 28,
							"character": 33
						}
					]
				},
				{
					"id": 647,
					"name": "registerRpcRoutes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 648,
							"name": "registerRpcRoutes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 649,
									"name": "serviceDefinition",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ModuleRpcCommon.ServiceDefinition",
										"id": 40
									}
								}
							],
							"parameters": [
								{
									"id": 650,
									"name": "serviceDefinition",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "serviceDefinition",
										"constraint": {
											"type": "reference",
											"name": "ModuleRpcCommon.ServiceDefinition",
											"id": 40
										}
									}
								},
								{
									"id": 651,
									"name": "serviceHandler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ModuleRpcServer.ServiceHandlerFor",
										"id": 433,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "serviceDefinition",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.ServiceDefinition",
													"id": 40
												}
											}
										]
									}
								},
								{
									"id": 652,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "RpcServerOptions",
										"id": 639
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Router"
							}
						},
						{
							"id": 653,
							"name": "registerRpcRoutes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 654,
									"name": "serviceDefinition",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ModuleRpcCommon.ServiceDefinition",
										"id": 40
									}
								},
								{
									"id": 655,
									"name": "RequestContext",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 656,
									"name": "serviceDefinition",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "serviceDefinition",
										"constraint": {
											"type": "reference",
											"name": "ModuleRpcCommon.ServiceDefinition",
											"id": 40
										}
									}
								},
								{
									"id": 657,
									"name": "serviceHandler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ModuleRpcServer.ServiceHandlerFor",
										"id": 433,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "serviceDefinition",
												"constraint": {
													"type": "reference",
													"name": "ModuleRpcCommon.ServiceDefinition",
													"id": 40
												}
											},
											{
												"type": "typeParameter",
												"name": "RequestContext"
											}
										]
									}
								},
								{
									"id": 658,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "RpcServerOptions",
												"id": 639
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 659,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "protocol/server/server.ts",
															"line": 52,
															"character": 29
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Router"
							}
						}
					],
					"sources": [
						{
							"fileName": "protocol/server/server.ts",
							"line": 36,
							"character": 33
						},
						{
							"fileName": "protocol/server/server.ts",
							"line": 43,
							"character": 33
						},
						{
							"fileName": "protocol/server/server.ts",
							"line": 58,
							"character": 33
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						639
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						647
					]
				}
			],
			"sources": [
				{
					"fileName": "protocol/server/server.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 371,
			"name": "ModuleRpcServer",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/hadrienchauvin/code/rpc_ts/src/server/errors.ts",
			"comment": {
				"shortText": "Generic tooling to implement the server side of an RPC service.  To create an RPC\nserver, however, see [[ModuleRpcProtocolServer.registerRpcRoutes]].",
				"tags": [
					{
						"tag": "license",
						"text": "\nCopyright (c) Aiden.ai\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n"
					}
				]
			},
			"children": [
				{
					"id": 379,
					"name": "HandlerProtocolError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The handler did not respect the protocol."
					},
					"children": [
						{
							"id": 380,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 383,
									"name": "new HandlerProtocolError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 384,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The URL (`<remote address>/<method name>`)\nthat did not respect the transport protocol.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 385,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HandlerProtocolError",
										"id": 379
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseError.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "server/errors.ts",
									"line": 19,
									"character": 55
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseError.__constructor"
							}
						},
						{
							"id": 382,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "server/errors.ts",
									"line": 24,
									"character": 52
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "BaseError.message"
							}
						},
						{
							"id": 386,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 22,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.name"
							}
						},
						{
							"id": 387,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.stack"
							}
						},
						{
							"id": 381,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true
							},
							"comment": {
								"shortText": "The URL (`<remote address>/<method name>`)\nthat did not respect the transport protocol.\n"
							},
							"sources": [
								{
									"fileName": "server/errors.ts",
									"line": 24,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								380
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								382,
								386,
								387,
								381
							]
						}
					],
					"sources": [
						{
							"fileName": "server/errors.ts",
							"line": 19,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ServerError",
							"id": 372
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 372,
					"name": "ServerError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true,
						"isAbstract": true
					},
					"comment": {
						"shortText": "Base class for all the server errors."
					},
					"children": [
						{
							"id": 376,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 377,
									"name": "new ServerError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 378,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ServerError",
										"id": 372
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseError.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.__constructor"
							}
						},
						{
							"id": 373,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.message"
							}
						},
						{
							"id": 374,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 22,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.name"
							}
						},
						{
							"id": 375,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.stack"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								376
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								373,
								374,
								375
							]
						}
					],
					"sources": [
						{
							"fileName": "server/errors.ts",
							"line": 14,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseError"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "HandlerProtocolError",
							"id": 379
						},
						{
							"type": "reference",
							"name": "ServerTransportError",
							"id": 388
						},
						{
							"type": "reference",
							"name": "ServerRpcError",
							"id": 396
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 396,
					"name": "ServerRpcError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An error sent by the RPC handler or the context provider.  Note that RPC clients\nthrow a different error ([[ModuleRpcClient.ClientRpcError]]).  We do this\nto ensure that no RPC server mistakenly rethrow the RPC error of an upstream\nservice."
					},
					"children": [
						{
							"id": 397,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 400,
									"name": "new ServerRpcError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 401,
											"name": "errorType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RpcErrorType",
												"id": 24
											}
										},
										{
											"id": 402,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 403,
											"name": "unsafeTransmittedMessage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ServerRpcError",
										"id": 396
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseError.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "server/errors.ts",
									"line": 42,
									"character": 49
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseError.__constructor"
							}
						},
						{
							"id": 398,
							"name": "errorType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true,
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "server/errors.ts",
									"line": 44,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"name": "RpcErrorType",
								"id": 24
							}
						},
						{
							"id": 404,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.message"
							}
						},
						{
							"id": 405,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 22,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.name"
							}
						},
						{
							"id": 406,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.stack"
							}
						},
						{
							"id": 399,
							"name": "unsafeTransmittedMessage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true,
								"isPublic": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "server/errors.ts",
									"line": 46,
									"character": 44
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								397
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								398,
								404,
								405,
								406,
								399
							]
						}
					],
					"sources": [
						{
							"fileName": "server/errors.ts",
							"line": 42,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ServerError",
							"id": 372
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 388,
					"name": "ServerTransportError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "There has been an error in the transport layer."
					},
					"children": [
						{
							"id": 389,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 391,
									"name": "new ServerTransportError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 392,
											"name": "cause",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ServerTransportError",
										"id": 388
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseError.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "server/errors.ts",
									"line": 30,
									"character": 55
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseError.__constructor"
							}
						},
						{
							"id": 390,
							"name": "cause",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "server/errors.ts",
									"line": 31,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"name": "Error"
							}
						},
						{
							"id": 393,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.message"
							}
						},
						{
							"id": 394,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 22,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.name"
							}
						},
						{
							"id": 395,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/hadrienchauvin/code/rpc_ts/node_modules/make-error/index.d.ts",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseError.stack"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								389
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								390,
								393,
								394,
								395
							]
						}
					],
					"sources": [
						{
							"fileName": "server/errors.ts",
							"line": 30,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ServerError",
							"id": 372
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 413,
					"name": "ServerContextConnector",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A context connector for the server."
					},
					"typeParameter": [
						{
							"id": 414,
							"name": "RequestContext",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 415,
							"name": "decodeRequestContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 416,
									"name": "decodeRequestContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Decodes the request context received from the client into a `RequestContext`."
									},
									"parameters": [
										{
											"id": 417,
											"name": "encodedRequestContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "RequestContext"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "server/context_connector.ts",
									"line": 20,
									"character": 22
								}
							]
						},
						{
							"id": 418,
							"name": "provideResponseContext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 419,
									"name": "provideResponseContext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Encodes the response context that is sent to the client\n(the client decodes it into a `ResponseContext` using a `ClientContextConnector`)."
									},
									"parameters": [
										{
											"id": 420,
											"name": "err",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Set if the RPC errored.  This can be used to modulate what you put\n           in the response context in case of failure.\n"
											},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EncodedContext",
												"id": 37
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "server/context_connector.ts",
									"line": 31,
									"character": 24
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								415,
								418
							]
						}
					],
					"sources": [
						{
							"fileName": "server/context_connector.ts",
							"line": 16,
							"character": 39
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "CompositeServerContextConnector",
							"id": 451
						},
						{
							"type": "reference",
							"name": "EmptyServerContextConnector",
							"id": 465
						},
						{
							"type": "reference",
							"name": "TimestampServerContextConnector",
							"id": 474
						},
						{
							"type": "reference",
							"name": "TokenAuthServerContextConnector",
							"id": 494
						}
					]
				},
				{
					"id": 422,
					"name": "ServerStreamMethodHandlerCallbacks",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Callbacks available to a server stream method handler."
					},
					"typeParameter": [
						{
							"id": 423,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.ServiceDefinition",
								"id": 40
							}
						},
						{
							"id": 424,
							"name": "method",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.MethodsFor",
								"id": 48,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition"
									}
								]
							}
						}
					],
					"children": [
						{
							"id": 429,
							"name": "onMessage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "To be called to send a message."
							},
							"sources": [
								{
									"fileName": "server/handler.ts",
									"line": 89,
									"character": 11
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 430,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 431,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 432,
													"name": "message",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ModuleRpcCommon.ResponseFor",
														"id": 53,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "serviceDefinition",
																"constraint": {
																	"type": "reference",
																	"name": "ModuleRpcCommon.ServiceDefinition",
																	"id": 40
																}
															},
															{
																"type": "typeParameter",
																"name": "method",
																"constraint": {
																	"type": "reference",
																	"name": "ModuleRpcCommon.MethodsFor",
																	"id": 48,
																	"typeArguments": [
																		{
																			"type": "typeParameter",
																			"name": "serviceDefinition"
																		}
																	]
																}
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "server/handler.ts",
											"line": 89,
											"character": 12
										}
									]
								}
							}
						},
						{
							"id": 425,
							"name": "onReady",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "To be called before any invocation of `onMessage` to register\na cancellation callback."
							},
							"sources": [
								{
									"fileName": "server/handler.ts",
									"line": 85,
									"character": 9
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 426,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 427,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 428,
													"name": "close",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CloseServerStream",
														"id": 445
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "server/handler.ts",
											"line": 85,
											"character": 10
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								429,
								425
							]
						}
					],
					"sources": [
						{
							"fileName": "server/handler.ts",
							"line": 77,
							"character": 51
						}
					]
				},
				{
					"id": 445,
					"name": "CloseServerStream",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Closes a server stream.",
						"tags": [
							{
								"tag": "see",
								"text": "[[ServiceMethodType.serverStream]]\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "server/handler.ts",
							"line": 122,
							"character": 29
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 446,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 447,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "server/handler.ts",
									"line": 122,
									"character": 31
								}
							]
						}
					}
				},
				{
					"id": 437,
					"name": "ServerStreamMethodHandler",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Implements a server stream on an RPC server.  Sending messages is done through\nthe callbacks.  The stream is closed when the returned promise resolved.\nTo signal an error (and close the stream), the returned promise can be rejected.",
						"tags": [
							{
								"tag": "param",
								"text": "The request sent to the server.",
								"param": "request"
							},
							{
								"tag": "param",
								"text": "Various callbacks that the handler can call during the life time\nof the server stream.",
								"param": "callbacks"
							},
							{
								"tag": "param",
								"text": "Client context that was optionally sent along with the request.\n",
								"param": "context"
							},
							{
								"tag": "throws",
								"text": "[[ModuleRpcServer.ServerRpcError]] can be thrown to set the RPC error\ntype that would be sent to the client.\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 438,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.ServiceDefinition",
								"id": 40
							}
						},
						{
							"id": 439,
							"name": "method",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.MethodsFor",
								"id": 48,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition"
									}
								]
							}
						},
						{
							"id": 440,
							"name": "RequestContext",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "server/handler.ts",
							"line": 59,
							"character": 37
						}
					],
					"type": {
						"type": "unknown",
						"name": "ServerStreamMethodHandler<serviceDefinition, method, RequestContext>"
					}
				},
				{
					"id": 433,
					"name": "ServiceHandlerFor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Service handlers implement the business logic of the service methods on the server.",
						"tags": [
							{
								"tag": "see",
								"text": "[[ModuleRpcServer.UnaryMethodHandler]]"
							},
							{
								"tag": "see",
								"text": "[[ModuleRpcServer.ServerStreamMethodHandler]]\n"
							},
							{
								"tag": "example",
								"text": "```Typescript\nconst serviceDefinition = {\n  increment: {\n    request: {} as { value: number },\n    response: {} as { value: number },\n  },\n};\n\nconst handler: ModuleRpcServer.ServiceHandlerFor<typeof serviceDefinition> = {\n  async increment({ value }) {\n    return { value: value + 1 };\n  },\n};\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 434,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.ServiceDefinition",
								"id": 40
							}
						},
						{
							"id": 435,
							"name": "Context",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "server/handler.ts",
							"line": 33,
							"character": 29
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 436,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "server/handler.ts",
									"line": 36,
									"character": 3
								}
							]
						}
					}
				},
				{
					"id": 441,
					"name": "UnaryMethodHandler",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Implements a unary method handler.  The returned promise resolved into the\nresponse.",
						"tags": [
							{
								"tag": "param",
								"text": "The request sent to the server.",
								"param": "request"
							},
							{
								"tag": "param",
								"text": "Context that was optionally sent along with the request.\n",
								"param": "context"
							},
							{
								"tag": "throws",
								"text": "[[ModuleRpcServer.ServerRpcError]] can be thrown to set the RPC error\ntype that would be sent to the client.\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 442,
							"name": "serviceDefinition",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.ServiceDefinition",
								"id": 40
							}
						},
						{
							"id": 443,
							"name": "method",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ModuleRpcCommon.MethodsFor",
								"id": 48,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "serviceDefinition"
									}
								]
							}
						},
						{
							"id": 444,
							"name": "RequestContext",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "server/handler.ts",
							"line": 104,
							"character": 30
						}
					],
					"type": {
						"type": "unknown",
						"name": "UnaryMethodHandler<serviceDefinition, method, RequestContext>"
					}
				},
				{
					"id": 407,
					"name": "formatServerRpcErrorMessage",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 408,
							"name": "formatServerRpcErrorMessage",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "visiblefortesting",
										"text": ""
									}
								]
							},
							"parameters": [
								{
									"id": 409,
									"name": "errorType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RpcErrorType",
										"id": 24
									}
								},
								{
									"id": 410,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 411,
									"name": "unsafeTransmittedMessage",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "server/errors.ts",
							"line": 55,
							"character": 43
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						379,
						372,
						396,
						388
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						413,
						422
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						445,
						437,
						433,
						441
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						407
					]
				}
			],
			"sources": [
				{
					"fileName": "server/errors.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1,
				16,
				313,
				287,
				450,
				590,
				574,
				521,
				607,
				630,
				638,
				371
			]
		}
	]
}